# Generated by Django 4.1.2 on 2022-11-01 06:53

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('spp_extras_api', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CharacterBattlegroundData',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('instance_id', models.PositiveIntegerField()),
                ('team', models.PositiveIntegerField()),
                ('join_x', models.FloatField()),
                ('join_y', models.FloatField()),
                ('join_z', models.FloatField()),
                ('join_o', models.FloatField()),
                ('join_map', models.IntegerField()),
            ],
            options={
                'db_table': 'character_battleground_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterGifts',
            fields=[
                ('guid', models.PositiveIntegerField()),
                ('item_guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('entry', models.PositiveIntegerField()),
                ('flags', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_gifts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterHonorCp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guid', models.PositiveIntegerField()),
                ('victim_type', models.PositiveIntegerField()),
                ('victim', models.PositiveIntegerField()),
                ('honor', models.FloatField()),
                ('date', models.PositiveIntegerField()),
                ('type', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_honor_cp',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterInventory',
            fields=[
                ('guid', models.PositiveIntegerField()),
                ('bag', models.PositiveIntegerField()),
                ('slot', models.PositiveIntegerField()),
                ('item', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('item_template', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_inventory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterQueststatus',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('quest', models.PositiveIntegerField()),
                ('status', models.PositiveIntegerField()),
                ('rewarded', models.PositiveIntegerField()),
                ('explored', models.PositiveIntegerField()),
                ('timer', models.PositiveBigIntegerField()),
                ('mobcount1', models.PositiveIntegerField()),
                ('mobcount2', models.PositiveIntegerField()),
                ('mobcount3', models.PositiveIntegerField()),
                ('mobcount4', models.PositiveIntegerField()),
                ('itemcount1', models.PositiveIntegerField()),
                ('itemcount2', models.PositiveIntegerField()),
                ('itemcount3', models.PositiveIntegerField()),
                ('itemcount4', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_queststatus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterQueststatusWeekly',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('quest', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_queststatus_weekly',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterReputation',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('faction', models.PositiveIntegerField()),
                ('standing', models.IntegerField()),
                ('flags', models.IntegerField()),
            ],
            options={
                'db_table': 'character_reputation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Characters',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('account', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=12)),
                ('race', models.PositiveIntegerField()),
                ('class_field', models.PositiveIntegerField(db_column='class')),
                ('gender', models.PositiveIntegerField()),
                ('level', models.PositiveIntegerField()),
                ('xp', models.PositiveIntegerField()),
                ('money', models.PositiveIntegerField()),
                ('playerbytes', models.PositiveIntegerField(db_column='playerBytes')),
                ('playerbytes2', models.PositiveIntegerField(db_column='playerBytes2')),
                ('playerflags', models.PositiveIntegerField(db_column='playerFlags')),
                ('position_x', models.FloatField()),
                ('position_y', models.FloatField()),
                ('position_z', models.FloatField()),
                ('map', models.PositiveIntegerField()),
                ('orientation', models.FloatField()),
                ('taximask', models.TextField(blank=True, null=True)),
                ('online', models.PositiveIntegerField()),
                ('cinematic', models.PositiveIntegerField()),
                ('totaltime', models.PositiveIntegerField()),
                ('leveltime', models.PositiveIntegerField()),
                ('logout_time', models.PositiveBigIntegerField()),
                ('is_logout_resting', models.PositiveIntegerField()),
                ('rest_bonus', models.FloatField()),
                ('resettalents_cost', models.PositiveIntegerField()),
                ('resettalents_time', models.PositiveBigIntegerField()),
                ('trans_x', models.FloatField()),
                ('trans_y', models.FloatField()),
                ('trans_z', models.FloatField()),
                ('trans_o', models.FloatField()),
                ('transguid', models.PositiveBigIntegerField()),
                ('extra_flags', models.PositiveIntegerField()),
                ('stable_slots', models.PositiveIntegerField()),
                ('at_login', models.PositiveIntegerField()),
                ('zone', models.PositiveIntegerField()),
                ('death_expire_time', models.PositiveBigIntegerField()),
                ('taxi_path', models.TextField(blank=True, null=True)),
                ('honor_highest_rank', models.PositiveIntegerField()),
                ('honor_standing', models.PositiveIntegerField()),
                ('stored_honor_rating', models.FloatField()),
                ('stored_dishonorable_kills', models.IntegerField()),
                ('stored_honorable_kills', models.IntegerField()),
                ('watchedfaction', models.PositiveIntegerField(db_column='watchedFaction')),
                ('drunk', models.PositiveSmallIntegerField()),
                ('health', models.PositiveIntegerField()),
                ('power1', models.PositiveIntegerField()),
                ('power2', models.PositiveIntegerField()),
                ('power3', models.PositiveIntegerField()),
                ('power4', models.PositiveIntegerField()),
                ('power5', models.PositiveIntegerField()),
                ('exploredzones', models.TextField(blank=True, db_column='exploredZones', null=True)),
                ('equipmentcache', models.TextField(blank=True, db_column='equipmentCache', null=True)),
                ('ammoid', models.PositiveIntegerField(db_column='ammoId')),
                ('actionbars', models.PositiveIntegerField(db_column='actionBars')),
                ('grantablelevels', models.PositiveIntegerField(blank=True, db_column='grantableLevels', null=True)),
                ('fishingsteps', models.PositiveIntegerField(db_column='fishingSteps')),
                ('deleteinfos_account', models.PositiveIntegerField(blank=True, db_column='deleteInfos_Account', null=True)),
                ('deleteinfos_name', models.CharField(blank=True, db_column='deleteInfos_Name', max_length=12, null=True)),
                ('deletedate', models.PositiveBigIntegerField(blank=True, db_column='deleteDate', null=True)),
            ],
            options={
                'db_table': 'characters',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterSpell',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('spell', models.PositiveIntegerField()),
                ('active', models.PositiveIntegerField()),
                ('disabled', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_spell',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterStats',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('maxhealth', models.PositiveIntegerField()),
                ('maxpower1', models.PositiveIntegerField()),
                ('maxpower2', models.PositiveIntegerField()),
                ('maxpower3', models.PositiveIntegerField()),
                ('maxpower4', models.PositiveIntegerField()),
                ('maxpower5', models.PositiveIntegerField()),
                ('maxpower6', models.PositiveIntegerField()),
                ('maxpower7', models.PositiveIntegerField()),
                ('strength', models.PositiveIntegerField()),
                ('agility', models.PositiveIntegerField()),
                ('stamina', models.PositiveIntegerField()),
                ('intellect', models.PositiveIntegerField()),
                ('spirit', models.PositiveIntegerField()),
                ('armor', models.PositiveIntegerField()),
                ('resholy', models.PositiveIntegerField(db_column='resHoly')),
                ('resfire', models.PositiveIntegerField(db_column='resFire')),
                ('resnature', models.PositiveIntegerField(db_column='resNature')),
                ('resfrost', models.PositiveIntegerField(db_column='resFrost')),
                ('resshadow', models.PositiveIntegerField(db_column='resShadow')),
                ('resarcane', models.PositiveIntegerField(db_column='resArcane')),
                ('blockpct', models.FloatField(db_column='blockPct')),
                ('dodgepct', models.FloatField(db_column='dodgePct')),
                ('parrypct', models.FloatField(db_column='parryPct')),
                ('critpct', models.FloatField(db_column='critPct')),
                ('rangedcritpct', models.FloatField(db_column='rangedCritPct')),
                ('spellcritpct', models.FloatField(db_column='spellCritPct')),
                ('holycritpct', models.FloatField(db_column='holyCritPct')),
                ('firecritpct', models.FloatField(db_column='fireCritPct')),
                ('naturecritpct', models.FloatField(db_column='natureCritPct')),
                ('frostcritpct', models.FloatField(db_column='frostCritPct')),
                ('shadowcritpct', models.FloatField(db_column='shadowCritPct')),
                ('arcanecritpct', models.FloatField(db_column='arcaneCritPct')),
                ('attackpower', models.PositiveIntegerField(db_column='attackPower')),
                ('attackpowermod', models.PositiveIntegerField(db_column='attackPowerMod')),
                ('rangedattackpower', models.PositiveIntegerField(db_column='rangedAttackPower')),
                ('rangedattackpowermod', models.PositiveIntegerField(db_column='rangedAttackPowerMod')),
                ('spellpower', models.PositiveIntegerField(db_column='spellPower')),
                ('holydamage', models.PositiveIntegerField(db_column='holyDamage')),
                ('firedamage', models.PositiveIntegerField(db_column='fireDamage')),
                ('naturedamage', models.PositiveIntegerField(db_column='natureDamage')),
                ('frostdamage', models.PositiveIntegerField(db_column='frostDamage')),
                ('shadowdamage', models.PositiveIntegerField(db_column='shadowDamage')),
                ('arcanedamage', models.PositiveIntegerField(db_column='arcaneDamage')),
                ('healbonus', models.PositiveIntegerField(db_column='healBonus')),
                ('defenserating', models.PositiveIntegerField(db_column='defenseRating')),
                ('dodgerating', models.PositiveIntegerField(db_column='dodgeRating')),
                ('parryrating', models.PositiveIntegerField(db_column='parryRating')),
                ('blockrating', models.PositiveIntegerField(db_column='blockRating')),
                ('resilience', models.PositiveIntegerField()),
                ('meleehitrating', models.PositiveIntegerField(db_column='meleeHitRating')),
                ('rangedhitrating', models.PositiveIntegerField(db_column='rangedHitRating')),
                ('spellhitrating', models.PositiveIntegerField(db_column='spellHitRating')),
                ('meleecritrating', models.PositiveIntegerField(db_column='meleeCritRating')),
                ('rangedcritrating', models.PositiveIntegerField(db_column='rangedCritRating')),
                ('spellcritrating', models.PositiveIntegerField(db_column='spellCritRating')),
                ('meleehasterating', models.PositiveIntegerField(db_column='meleeHasteRating')),
                ('rangedhasterating', models.PositiveIntegerField(db_column='rangedHasteRating')),
                ('spellhasterating', models.PositiveIntegerField(db_column='spellHasteRating')),
                ('expertise', models.PositiveIntegerField()),
                ('expertiserating', models.PositiveIntegerField(db_column='expertiseRating')),
                ('mainhanddamagemin', models.FloatField(db_column='mainHandDamageMin')),
                ('mainhanddamagemax', models.FloatField(db_column='mainHandDamageMax')),
                ('mainhandspeed', models.FloatField(db_column='mainHandSpeed')),
                ('offhanddamagemin', models.FloatField(db_column='offHandDamageMin')),
                ('offhanddamagemax', models.FloatField(db_column='offHandDamageMax')),
                ('offhandspeed', models.FloatField(db_column='offHandSpeed')),
                ('rangeddamagemin', models.FloatField(db_column='rangedDamageMin')),
                ('rangeddamagemax', models.FloatField(db_column='rangedDamageMax')),
                ('rangedspeed', models.FloatField(db_column='rangedSpeed')),
                ('manaregen', models.FloatField(db_column='manaRegen')),
                ('manainterrupt', models.FloatField(db_column='manaInterrupt')),
                ('pvprank', models.PositiveIntegerField(db_column='pvpRank')),
            ],
            options={
                'db_table': 'character_stats',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemInstance',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('owner_guid', models.PositiveIntegerField()),
                ('itementry', models.PositiveIntegerField(db_column='itemEntry')),
                ('creatorguid', models.PositiveIntegerField(db_column='creatorGuid')),
                ('giftcreatorguid', models.PositiveIntegerField(db_column='giftCreatorGuid')),
                ('count', models.PositiveIntegerField()),
                ('duration', models.PositiveIntegerField()),
                ('charges', models.TextField()),
                ('flags', models.PositiveIntegerField()),
                ('enchantments', models.TextField()),
                ('randompropertyid', models.SmallIntegerField(db_column='randomPropertyId')),
                ('durability', models.PositiveIntegerField()),
                ('itemtextid', models.PositiveIntegerField(db_column='itemTextId')),
            ],
            options={
                'db_table': 'item_instance',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemLoot',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('owner_guid', models.PositiveIntegerField()),
                ('itemid', models.PositiveIntegerField()),
                ('amount', models.PositiveIntegerField()),
                ('property', models.IntegerField()),
            ],
            options={
                'db_table': 'item_loot',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemText',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('text', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'item_text',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mail',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('messagetype', models.PositiveIntegerField(db_column='messageType')),
                ('stationery', models.IntegerField()),
                ('mailtemplateid', models.PositiveIntegerField(db_column='mailTemplateId')),
                ('sender', models.PositiveIntegerField()),
                ('receiver', models.PositiveIntegerField()),
                ('subject', models.TextField(blank=True, null=True)),
                ('itemtextid', models.PositiveIntegerField(db_column='itemTextId')),
                ('has_items', models.PositiveIntegerField()),
                ('expire_time', models.PositiveBigIntegerField()),
                ('deliver_time', models.PositiveBigIntegerField()),
                ('money', models.PositiveIntegerField()),
                ('cod', models.PositiveIntegerField()),
                ('checked', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'mail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MailItems',
            fields=[
                ('mail_id', models.IntegerField(primary_key=True, serialize=False)),
                ('item_guid', models.IntegerField()),
                ('item_template', models.IntegerField()),
                ('receiver', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'mail_items',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PvpstatsBattlegrounds',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('winner_team', models.IntegerField()),
                ('bracket_id', models.PositiveIntegerField()),
                ('type', models.PositiveIntegerField()),
                ('date', models.DateTimeField()),
            ],
            options={
                'db_table': 'pvpstats_battlegrounds',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PvpstatsPlayers',
            fields=[
                ('battleground_id', models.PositiveBigIntegerField(primary_key=True, serialize=False)),
                ('character_guid', models.PositiveIntegerField()),
                ('score_killing_blows', models.PositiveIntegerField()),
                ('score_deaths', models.PositiveIntegerField()),
                ('score_honorable_kills', models.PositiveIntegerField()),
                ('score_bonus_honor', models.PositiveIntegerField()),
                ('score_damage_done', models.PositiveIntegerField()),
                ('score_healing_done', models.PositiveIntegerField()),
                ('attr_1', models.PositiveIntegerField()),
                ('attr_2', models.PositiveIntegerField()),
                ('attr_3', models.PositiveIntegerField()),
                ('attr_4', models.PositiveIntegerField()),
                ('attr_5', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'pvpstats_players',
                'managed': False,
            },
        ),
        migrations.DeleteModel(
            name='Character',
        ),
        migrations.AlterModelOptions(
            name='account',
            options={'managed': False},
        ),
    ]
