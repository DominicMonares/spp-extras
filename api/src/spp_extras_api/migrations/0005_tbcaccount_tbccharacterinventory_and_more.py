# Generated by Django 4.1.2 on 2023-04-09 06:04

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('spp_extras_api', '0004_classicaccount_classiccharacterinventory_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='TbcAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=32, unique=True)),
                ('gmlevel', models.PositiveIntegerField()),
                ('sessionkey', models.TextField(blank=True, null=True)),
                ('v', models.TextField(blank=True, null=True)),
                ('s', models.TextField(blank=True, null=True)),
                ('email', models.TextField(blank=True, null=True)),
                ('joindate', models.DateTimeField()),
                ('lockedip', models.CharField(db_column='lockedIp', max_length=30)),
                ('failed_logins', models.PositiveIntegerField()),
                ('locked', models.PositiveIntegerField()),
                ('last_login', models.DateTimeField()),
                ('active_realm_id', models.PositiveIntegerField()),
                ('expansion', models.PositiveIntegerField()),
                ('mutetime', models.PositiveBigIntegerField()),
                ('locale', models.CharField(max_length=4)),
                ('token', models.TextField(blank=True, null=True)),
                ('os', models.CharField(max_length=4)),
                ('platform', models.CharField(max_length=4)),
                ('flags', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'account',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcCharacterInventory',
            fields=[
                ('guid', models.PositiveIntegerField()),
                ('bag', models.PositiveIntegerField()),
                ('slot', models.PositiveIntegerField()),
                ('item', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('item_template', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_inventory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcCharacterQueststatus',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('quest', models.PositiveIntegerField()),
                ('status', models.PositiveIntegerField()),
                ('rewarded', models.PositiveIntegerField()),
                ('explored', models.PositiveIntegerField()),
                ('timer', models.PositiveBigIntegerField()),
                ('mobcount1', models.PositiveIntegerField()),
                ('mobcount2', models.PositiveIntegerField()),
                ('mobcount3', models.PositiveIntegerField()),
                ('mobcount4', models.PositiveIntegerField()),
                ('itemcount1', models.PositiveIntegerField()),
                ('itemcount2', models.PositiveIntegerField()),
                ('itemcount3', models.PositiveIntegerField()),
                ('itemcount4', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_queststatus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcCharacterQueststatusDaily',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('quest', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_queststatus_daily',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcCharacterQueststatusMonthly',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('quest', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_queststatus_monthly',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcCharacterQueststatusWeekly',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('quest', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_queststatus_weekly',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcCharacterReputation',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('faction', models.PositiveIntegerField()),
                ('standing', models.IntegerField()),
                ('flags', models.IntegerField()),
            ],
            options={
                'db_table': 'character_reputation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcCharacters',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('account', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=12)),
                ('race', models.PositiveIntegerField()),
                ('class_field', models.PositiveIntegerField(db_column='class')),
                ('gender', models.PositiveIntegerField()),
                ('level', models.PositiveIntegerField()),
                ('xp', models.PositiveIntegerField()),
                ('money', models.PositiveIntegerField()),
                ('playerbytes', models.PositiveIntegerField(db_column='playerBytes')),
                ('playerbytes2', models.PositiveIntegerField(db_column='playerBytes2')),
                ('playerflags', models.PositiveIntegerField(db_column='playerFlags')),
                ('position_x', models.FloatField()),
                ('position_y', models.FloatField()),
                ('position_z', models.FloatField()),
                ('map', models.PositiveIntegerField()),
                ('dungeon_difficulty', models.PositiveIntegerField()),
                ('orientation', models.FloatField()),
                ('taximask', models.TextField(blank=True, null=True)),
                ('online', models.PositiveIntegerField()),
                ('cinematic', models.PositiveIntegerField()),
                ('totaltime', models.PositiveIntegerField()),
                ('leveltime', models.PositiveIntegerField()),
                ('logout_time', models.PositiveBigIntegerField()),
                ('is_logout_resting', models.PositiveIntegerField()),
                ('rest_bonus', models.FloatField()),
                ('resettalents_cost', models.PositiveIntegerField()),
                ('resettalents_time', models.PositiveBigIntegerField()),
                ('trans_x', models.FloatField()),
                ('trans_y', models.FloatField()),
                ('trans_z', models.FloatField()),
                ('trans_o', models.FloatField()),
                ('transguid', models.PositiveBigIntegerField()),
                ('extra_flags', models.PositiveIntegerField()),
                ('stable_slots', models.PositiveIntegerField()),
                ('at_login', models.PositiveIntegerField()),
                ('zone', models.PositiveIntegerField()),
                ('death_expire_time', models.PositiveBigIntegerField()),
                ('taxi_path', models.TextField(blank=True, null=True)),
                ('arenapoints', models.PositiveIntegerField(db_column='arenaPoints')),
                ('totalhonorpoints', models.PositiveIntegerField(db_column='totalHonorPoints')),
                ('todayhonorpoints', models.PositiveIntegerField(db_column='todayHonorPoints')),
                ('yesterdayhonorpoints', models.PositiveIntegerField(db_column='yesterdayHonorPoints')),
                ('totalkills', models.PositiveIntegerField(db_column='totalKills')),
                ('todaykills', models.PositiveSmallIntegerField(db_column='todayKills')),
                ('yesterdaykills', models.PositiveSmallIntegerField(db_column='yesterdayKills')),
                ('chosentitle', models.PositiveIntegerField(db_column='chosenTitle')),
                ('watchedfaction', models.PositiveIntegerField(db_column='watchedFaction')),
                ('drunk', models.PositiveSmallIntegerField()),
                ('health', models.PositiveIntegerField()),
                ('power1', models.PositiveIntegerField()),
                ('power2', models.PositiveIntegerField()),
                ('power3', models.PositiveIntegerField()),
                ('power4', models.PositiveIntegerField()),
                ('power5', models.PositiveIntegerField()),
                ('exploredzones', models.TextField(blank=True, db_column='exploredZones', null=True)),
                ('equipmentcache', models.TextField(blank=True, db_column='equipmentCache', null=True)),
                ('ammoid', models.PositiveIntegerField(db_column='ammoId')),
                ('knowntitles', models.TextField(blank=True, db_column='knownTitles', null=True)),
                ('actionbars', models.PositiveIntegerField(db_column='actionBars')),
                ('grantablelevels', models.PositiveIntegerField(blank=True, db_column='grantableLevels', null=True)),
                ('fishingsteps', models.PositiveIntegerField(db_column='fishingSteps')),
                ('deleteinfos_account', models.PositiveIntegerField(blank=True, db_column='deleteInfos_Account', null=True)),
                ('deleteinfos_name', models.CharField(blank=True, db_column='deleteInfos_Name', max_length=12, null=True)),
                ('deletedate', models.PositiveBigIntegerField(blank=True, db_column='deleteDate', null=True)),
            ],
            options={
                'db_table': 'characters',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcCharacterSpell',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('spell', models.PositiveIntegerField()),
                ('active', models.PositiveIntegerField()),
                ('disabled', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_spell',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcCreatureLootTemplate',
            fields=[
                ('entry', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('item', models.PositiveIntegerField()),
                ('chanceorquestchance', models.FloatField(db_column='ChanceOrQuestChance')),
                ('groupid', models.PositiveIntegerField()),
                ('mincountorref', models.IntegerField(db_column='mincountOrRef')),
                ('maxcount', models.PositiveIntegerField()),
                ('condition_id', models.PositiveIntegerField()),
                ('comments', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'db_table': 'creature_loot_template',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcItemInstance',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('owner_guid', models.PositiveIntegerField()),
                ('itementry', models.PositiveIntegerField(db_column='itemEntry')),
                ('creatorguid', models.PositiveIntegerField(db_column='creatorGuid')),
                ('giftcreatorguid', models.PositiveIntegerField(db_column='giftCreatorGuid')),
                ('count', models.PositiveIntegerField()),
                ('duration', models.PositiveIntegerField()),
                ('charges', models.TextField()),
                ('flags', models.PositiveIntegerField()),
                ('enchantments', models.TextField()),
                ('randompropertyid', models.SmallIntegerField(db_column='randomPropertyId')),
                ('durability', models.PositiveIntegerField()),
                ('itemtextid', models.PositiveIntegerField(db_column='itemTextId')),
            ],
            options={
                'db_table': 'item_instance',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcItemLootTemplate',
            fields=[
                ('entry', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('item', models.PositiveIntegerField()),
                ('chanceorquestchance', models.FloatField(db_column='ChanceOrQuestChance')),
                ('groupid', models.PositiveIntegerField()),
                ('mincountorref', models.IntegerField(db_column='mincountOrRef')),
                ('maxcount', models.PositiveSmallIntegerField()),
                ('condition_id', models.PositiveIntegerField()),
                ('comments', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'db_table': 'item_loot_template',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcItemTemplate',
            fields=[
                ('entry', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('class_field', models.PositiveIntegerField(db_column='class')),
                ('subclass', models.PositiveIntegerField()),
                ('unk0', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('displayid', models.PositiveIntegerField()),
                ('quality', models.PositiveIntegerField(db_column='Quality')),
                ('flags', models.PositiveIntegerField(db_column='Flags')),
                ('buycount', models.PositiveIntegerField(db_column='BuyCount')),
                ('buyprice', models.PositiveIntegerField(db_column='BuyPrice')),
                ('sellprice', models.PositiveIntegerField(db_column='SellPrice')),
                ('inventorytype', models.PositiveIntegerField(db_column='InventoryType')),
                ('allowableclass', models.IntegerField(db_column='AllowableClass')),
                ('allowablerace', models.IntegerField(db_column='AllowableRace')),
                ('itemlevel', models.PositiveIntegerField(db_column='ItemLevel')),
                ('requiredlevel', models.PositiveIntegerField(db_column='RequiredLevel')),
                ('requiredskill', models.PositiveSmallIntegerField(db_column='RequiredSkill')),
                ('requiredskillrank', models.PositiveSmallIntegerField(db_column='RequiredSkillRank')),
                ('requiredspell', models.PositiveIntegerField()),
                ('requiredhonorrank', models.PositiveIntegerField()),
                ('requiredcityrank', models.PositiveIntegerField(db_column='RequiredCityRank')),
                ('requiredreputationfaction', models.PositiveSmallIntegerField(db_column='RequiredReputationFaction')),
                ('requiredreputationrank', models.PositiveSmallIntegerField(db_column='RequiredReputationRank')),
                ('maxcount', models.PositiveSmallIntegerField()),
                ('stackable', models.PositiveSmallIntegerField()),
                ('containerslots', models.PositiveIntegerField(db_column='ContainerSlots')),
                ('stat_type1', models.PositiveIntegerField()),
                ('stat_value1', models.SmallIntegerField()),
                ('stat_type2', models.PositiveIntegerField()),
                ('stat_value2', models.SmallIntegerField()),
                ('stat_type3', models.PositiveIntegerField()),
                ('stat_value3', models.SmallIntegerField()),
                ('stat_type4', models.PositiveIntegerField()),
                ('stat_value4', models.SmallIntegerField()),
                ('stat_type5', models.PositiveIntegerField()),
                ('stat_value5', models.SmallIntegerField()),
                ('stat_type6', models.PositiveIntegerField()),
                ('stat_value6', models.SmallIntegerField()),
                ('stat_type7', models.PositiveIntegerField()),
                ('stat_value7', models.SmallIntegerField()),
                ('stat_type8', models.PositiveIntegerField()),
                ('stat_value8', models.SmallIntegerField()),
                ('stat_type9', models.PositiveIntegerField()),
                ('stat_value9', models.SmallIntegerField()),
                ('stat_type10', models.PositiveIntegerField()),
                ('stat_value10', models.SmallIntegerField()),
                ('dmg_min1', models.FloatField()),
                ('dmg_max1', models.FloatField()),
                ('dmg_type1', models.PositiveIntegerField()),
                ('dmg_min2', models.FloatField()),
                ('dmg_max2', models.FloatField()),
                ('dmg_type2', models.PositiveIntegerField()),
                ('dmg_min3', models.FloatField()),
                ('dmg_max3', models.FloatField()),
                ('dmg_type3', models.PositiveIntegerField()),
                ('dmg_min4', models.FloatField()),
                ('dmg_max4', models.FloatField()),
                ('dmg_type4', models.PositiveIntegerField()),
                ('dmg_min5', models.FloatField()),
                ('dmg_max5', models.FloatField()),
                ('dmg_type5', models.PositiveIntegerField()),
                ('armor', models.PositiveSmallIntegerField()),
                ('holy_res', models.PositiveIntegerField()),
                ('fire_res', models.PositiveIntegerField()),
                ('nature_res', models.PositiveIntegerField()),
                ('frost_res', models.PositiveIntegerField()),
                ('shadow_res', models.PositiveIntegerField()),
                ('arcane_res', models.PositiveIntegerField()),
                ('delay', models.PositiveSmallIntegerField()),
                ('ammo_type', models.PositiveIntegerField()),
                ('rangedmodrange', models.FloatField(db_column='RangedModRange')),
                ('spellid_1', models.PositiveIntegerField()),
                ('spelltrigger_1', models.PositiveIntegerField()),
                ('spellcharges_1', models.IntegerField()),
                ('spellppmrate_1', models.FloatField(db_column='spellppmRate_1')),
                ('spellcooldown_1', models.IntegerField()),
                ('spellcategory_1', models.PositiveSmallIntegerField()),
                ('spellcategorycooldown_1', models.IntegerField()),
                ('spellid_2', models.PositiveIntegerField()),
                ('spelltrigger_2', models.PositiveIntegerField()),
                ('spellcharges_2', models.IntegerField()),
                ('spellppmrate_2', models.FloatField(db_column='spellppmRate_2')),
                ('spellcooldown_2', models.IntegerField()),
                ('spellcategory_2', models.PositiveSmallIntegerField()),
                ('spellcategorycooldown_2', models.IntegerField()),
                ('spellid_3', models.PositiveIntegerField()),
                ('spelltrigger_3', models.PositiveIntegerField()),
                ('spellcharges_3', models.IntegerField()),
                ('spellppmrate_3', models.FloatField(db_column='spellppmRate_3')),
                ('spellcooldown_3', models.IntegerField()),
                ('spellcategory_3', models.PositiveSmallIntegerField()),
                ('spellcategorycooldown_3', models.IntegerField()),
                ('spellid_4', models.PositiveIntegerField()),
                ('spelltrigger_4', models.PositiveIntegerField()),
                ('spellcharges_4', models.IntegerField()),
                ('spellppmrate_4', models.FloatField(db_column='spellppmRate_4')),
                ('spellcooldown_4', models.IntegerField()),
                ('spellcategory_4', models.PositiveSmallIntegerField()),
                ('spellcategorycooldown_4', models.IntegerField()),
                ('spellid_5', models.PositiveIntegerField()),
                ('spelltrigger_5', models.PositiveIntegerField()),
                ('spellcharges_5', models.IntegerField()),
                ('spellppmrate_5', models.FloatField(db_column='spellppmRate_5')),
                ('spellcooldown_5', models.IntegerField()),
                ('spellcategory_5', models.PositiveSmallIntegerField()),
                ('spellcategorycooldown_5', models.IntegerField()),
                ('bonding', models.PositiveIntegerField()),
                ('description', models.CharField(max_length=255)),
                ('pagetext', models.PositiveIntegerField(db_column='PageText')),
                ('languageid', models.PositiveIntegerField(db_column='LanguageID')),
                ('pagematerial', models.PositiveIntegerField(db_column='PageMaterial')),
                ('startquest', models.PositiveIntegerField()),
                ('lockid', models.PositiveIntegerField()),
                ('material', models.IntegerField(db_column='Material')),
                ('sheath', models.PositiveIntegerField()),
                ('randomproperty', models.PositiveIntegerField(db_column='RandomProperty')),
                ('randomsuffix', models.PositiveIntegerField(db_column='RandomSuffix')),
                ('block', models.PositiveIntegerField()),
                ('itemset', models.PositiveIntegerField()),
                ('maxdurability', models.PositiveSmallIntegerField(db_column='MaxDurability')),
                ('area', models.PositiveIntegerField()),
                ('map', models.SmallIntegerField(db_column='Map')),
                ('bagfamily', models.IntegerField(db_column='BagFamily')),
                ('totemcategory', models.IntegerField(db_column='TotemCategory')),
                ('socketcolor_1', models.IntegerField(db_column='socketColor_1')),
                ('socketcontent_1', models.IntegerField(db_column='socketContent_1')),
                ('socketcolor_2', models.IntegerField(db_column='socketColor_2')),
                ('socketcontent_2', models.IntegerField(db_column='socketContent_2')),
                ('socketcolor_3', models.IntegerField(db_column='socketColor_3')),
                ('socketcontent_3', models.IntegerField(db_column='socketContent_3')),
                ('socketbonus', models.IntegerField(db_column='socketBonus')),
                ('gemproperties', models.IntegerField(db_column='GemProperties')),
                ('requireddisenchantskill', models.SmallIntegerField(db_column='RequiredDisenchantSkill')),
                ('armordamagemodifier', models.FloatField(db_column='ArmorDamageModifier')),
                ('scriptname', models.CharField(db_column='ScriptName', max_length=64)),
                ('disenchantid', models.PositiveIntegerField(db_column='DisenchantID')),
                ('foodtype', models.PositiveIntegerField(db_column='FoodType')),
                ('minmoneyloot', models.PositiveIntegerField(db_column='minMoneyLoot')),
                ('maxmoneyloot', models.PositiveIntegerField(db_column='maxMoneyLoot')),
                ('duration', models.PositiveIntegerField(db_column='Duration')),
                ('extraflags', models.PositiveIntegerField(db_column='ExtraFlags')),
            ],
            options={
                'db_table': 'item_template',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcMail',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('messagetype', models.PositiveIntegerField(db_column='messageType')),
                ('stationery', models.IntegerField()),
                ('mailtemplateid', models.PositiveIntegerField(db_column='mailTemplateId')),
                ('sender', models.PositiveIntegerField()),
                ('receiver', models.PositiveIntegerField()),
                ('subject', models.TextField(blank=True, null=True)),
                ('itemtextid', models.PositiveIntegerField(db_column='itemTextId')),
                ('has_items', models.PositiveIntegerField()),
                ('expire_time', models.PositiveBigIntegerField()),
                ('deliver_time', models.PositiveBigIntegerField()),
                ('money', models.PositiveIntegerField()),
                ('cod', models.PositiveIntegerField()),
                ('checked', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'mail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcMailItems',
            fields=[
                ('mail_id', models.IntegerField(primary_key=True, serialize=False)),
                ('item_guid', models.IntegerField()),
                ('item_template', models.IntegerField()),
                ('receiver', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'mail_items',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcMailLevelReward',
            fields=[
                ('level', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('racemask', models.PositiveIntegerField(db_column='raceMask')),
                ('mailtemplateid', models.PositiveIntegerField(db_column='mailTemplateId')),
                ('senderentry', models.PositiveIntegerField(db_column='senderEntry')),
            ],
            options={
                'db_table': 'mail_level_reward',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcMailLootTemplate',
            fields=[
                ('entry', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('item', models.PositiveIntegerField()),
                ('chanceorquestchance', models.FloatField(db_column='ChanceOrQuestChance')),
                ('groupid', models.PositiveIntegerField()),
                ('mincountorref', models.IntegerField(db_column='mincountOrRef')),
                ('maxcount', models.PositiveIntegerField()),
                ('condition_id', models.PositiveIntegerField()),
                ('comments', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'db_table': 'mail_loot_template',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcPvpstatsPlayers',
            fields=[
                ('battleground_id', models.PositiveBigIntegerField(primary_key=True, serialize=False)),
                ('character_guid', models.PositiveIntegerField()),
                ('score_killing_blows', models.PositiveIntegerField()),
                ('score_deaths', models.PositiveIntegerField()),
                ('score_honorable_kills', models.PositiveIntegerField()),
                ('score_bonus_honor', models.PositiveIntegerField()),
                ('score_damage_done', models.PositiveIntegerField()),
                ('score_healing_done', models.PositiveIntegerField()),
                ('attr_1', models.PositiveIntegerField()),
                ('attr_2', models.PositiveIntegerField()),
                ('attr_3', models.PositiveIntegerField()),
                ('attr_4', models.PositiveIntegerField()),
                ('attr_5', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'pvpstats_players',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcQuestTemplate',
            fields=[
                ('entry', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('method', models.PositiveIntegerField(db_column='Method')),
                ('zoneorsort', models.SmallIntegerField(db_column='ZoneOrSort')),
                ('minlevel', models.PositiveIntegerField(db_column='MinLevel')),
                ('maxlevel', models.PositiveIntegerField(db_column='MaxLevel')),
                ('questlevel', models.SmallIntegerField(db_column='QuestLevel')),
                ('type', models.PositiveSmallIntegerField(db_column='Type')),
                ('requiredclasses', models.PositiveSmallIntegerField(db_column='RequiredClasses')),
                ('requiredraces', models.PositiveSmallIntegerField(db_column='RequiredRaces')),
                ('requiredskill', models.PositiveSmallIntegerField(db_column='RequiredSkill')),
                ('requiredskillvalue', models.PositiveSmallIntegerField(db_column='RequiredSkillValue')),
                ('requiredcondition', models.PositiveIntegerField(db_column='RequiredCondition')),
                ('repobjectivefaction', models.PositiveSmallIntegerField(db_column='RepObjectiveFaction')),
                ('repobjectivevalue', models.IntegerField(db_column='RepObjectiveValue')),
                ('requiredminrepfaction', models.PositiveSmallIntegerField(db_column='RequiredMinRepFaction')),
                ('requiredminrepvalue', models.IntegerField(db_column='RequiredMinRepValue')),
                ('requiredmaxrepfaction', models.PositiveSmallIntegerField(db_column='RequiredMaxRepFaction')),
                ('requiredmaxrepvalue', models.IntegerField(db_column='RequiredMaxRepValue')),
                ('suggestedplayers', models.PositiveIntegerField(db_column='SuggestedPlayers')),
                ('limittime', models.PositiveIntegerField(db_column='LimitTime')),
                ('questflags', models.PositiveSmallIntegerField(db_column='QuestFlags')),
                ('specialflags', models.PositiveIntegerField(db_column='SpecialFlags')),
                ('chartitleid', models.PositiveIntegerField(db_column='CharTitleId')),
                ('prevquestid', models.IntegerField(db_column='PrevQuestId')),
                ('nextquestid', models.IntegerField(db_column='NextQuestId')),
                ('exclusivegroup', models.IntegerField(db_column='ExclusiveGroup')),
                ('breadcrumbforquestid', models.PositiveIntegerField(db_column='BreadcrumbForQuestId')),
                ('nextquestinchain', models.PositiveIntegerField(db_column='NextQuestInChain')),
                ('srcitemid', models.PositiveIntegerField(db_column='SrcItemId')),
                ('srcitemcount', models.PositiveIntegerField(db_column='SrcItemCount')),
                ('srcspell', models.PositiveIntegerField(db_column='SrcSpell')),
                ('title', models.TextField(blank=True, db_column='Title', null=True)),
                ('details', models.TextField(blank=True, db_column='Details', null=True)),
                ('objectives', models.TextField(blank=True, db_column='Objectives', null=True)),
                ('offerrewardtext', models.TextField(blank=True, db_column='OfferRewardText', null=True)),
                ('requestitemstext', models.TextField(blank=True, db_column='RequestItemsText', null=True)),
                ('endtext', models.TextField(blank=True, db_column='EndText', null=True)),
                ('objectivetext1', models.TextField(blank=True, db_column='ObjectiveText1', null=True)),
                ('objectivetext2', models.TextField(blank=True, db_column='ObjectiveText2', null=True)),
                ('objectivetext3', models.TextField(blank=True, db_column='ObjectiveText3', null=True)),
                ('objectivetext4', models.TextField(blank=True, db_column='ObjectiveText4', null=True)),
                ('reqitemid1', models.PositiveIntegerField(db_column='ReqItemId1')),
                ('reqitemid2', models.PositiveIntegerField(db_column='ReqItemId2')),
                ('reqitemid3', models.PositiveIntegerField(db_column='ReqItemId3')),
                ('reqitemid4', models.PositiveIntegerField(db_column='ReqItemId4')),
                ('reqitemcount1', models.PositiveSmallIntegerField(db_column='ReqItemCount1')),
                ('reqitemcount2', models.PositiveSmallIntegerField(db_column='ReqItemCount2')),
                ('reqitemcount3', models.PositiveSmallIntegerField(db_column='ReqItemCount3')),
                ('reqitemcount4', models.PositiveSmallIntegerField(db_column='ReqItemCount4')),
                ('reqsourceid1', models.PositiveIntegerField(db_column='ReqSourceId1')),
                ('reqsourceid2', models.PositiveIntegerField(db_column='ReqSourceId2')),
                ('reqsourceid3', models.PositiveIntegerField(db_column='ReqSourceId3')),
                ('reqsourceid4', models.PositiveIntegerField(db_column='ReqSourceId4')),
                ('reqsourcecount1', models.PositiveSmallIntegerField(db_column='ReqSourceCount1')),
                ('reqsourcecount2', models.PositiveSmallIntegerField(db_column='ReqSourceCount2')),
                ('reqsourcecount3', models.PositiveSmallIntegerField(db_column='ReqSourceCount3')),
                ('reqsourcecount4', models.PositiveSmallIntegerField(db_column='ReqSourceCount4')),
                ('reqcreatureorgoid1', models.IntegerField(db_column='ReqCreatureOrGOId1')),
                ('reqcreatureorgoid2', models.IntegerField(db_column='ReqCreatureOrGOId2')),
                ('reqcreatureorgoid3', models.IntegerField(db_column='ReqCreatureOrGOId3')),
                ('reqcreatureorgoid4', models.IntegerField(db_column='ReqCreatureOrGOId4')),
                ('reqcreatureorgocount1', models.PositiveSmallIntegerField(db_column='ReqCreatureOrGOCount1')),
                ('reqcreatureorgocount2', models.PositiveSmallIntegerField(db_column='ReqCreatureOrGOCount2')),
                ('reqcreatureorgocount3', models.PositiveSmallIntegerField(db_column='ReqCreatureOrGOCount3')),
                ('reqcreatureorgocount4', models.PositiveSmallIntegerField(db_column='ReqCreatureOrGOCount4')),
                ('reqspellcast1', models.PositiveIntegerField(db_column='ReqSpellCast1')),
                ('reqspellcast2', models.PositiveIntegerField(db_column='ReqSpellCast2')),
                ('reqspellcast3', models.PositiveIntegerField(db_column='ReqSpellCast3')),
                ('reqspellcast4', models.PositiveIntegerField(db_column='ReqSpellCast4')),
                ('rewchoiceitemid1', models.PositiveIntegerField(db_column='RewChoiceItemId1')),
                ('rewchoiceitemid2', models.PositiveIntegerField(db_column='RewChoiceItemId2')),
                ('rewchoiceitemid3', models.PositiveIntegerField(db_column='RewChoiceItemId3')),
                ('rewchoiceitemid4', models.PositiveIntegerField(db_column='RewChoiceItemId4')),
                ('rewchoiceitemid5', models.PositiveIntegerField(db_column='RewChoiceItemId5')),
                ('rewchoiceitemid6', models.PositiveIntegerField(db_column='RewChoiceItemId6')),
                ('rewchoiceitemcount1', models.PositiveSmallIntegerField(db_column='RewChoiceItemCount1')),
                ('rewchoiceitemcount2', models.PositiveSmallIntegerField(db_column='RewChoiceItemCount2')),
                ('rewchoiceitemcount3', models.PositiveSmallIntegerField(db_column='RewChoiceItemCount3')),
                ('rewchoiceitemcount4', models.PositiveSmallIntegerField(db_column='RewChoiceItemCount4')),
                ('rewchoiceitemcount5', models.PositiveSmallIntegerField(db_column='RewChoiceItemCount5')),
                ('rewchoiceitemcount6', models.PositiveSmallIntegerField(db_column='RewChoiceItemCount6')),
                ('rewitemid1', models.PositiveIntegerField(db_column='RewItemId1')),
                ('rewitemid2', models.PositiveIntegerField(db_column='RewItemId2')),
                ('rewitemid3', models.PositiveIntegerField(db_column='RewItemId3')),
                ('rewitemid4', models.PositiveIntegerField(db_column='RewItemId4')),
                ('rewitemcount1', models.PositiveSmallIntegerField(db_column='RewItemCount1')),
                ('rewitemcount2', models.PositiveSmallIntegerField(db_column='RewItemCount2')),
                ('rewitemcount3', models.PositiveSmallIntegerField(db_column='RewItemCount3')),
                ('rewitemcount4', models.PositiveSmallIntegerField(db_column='RewItemCount4')),
                ('rewrepfaction1', models.PositiveSmallIntegerField(db_column='RewRepFaction1')),
                ('rewrepfaction2', models.PositiveSmallIntegerField(db_column='RewRepFaction2')),
                ('rewrepfaction3', models.PositiveSmallIntegerField(db_column='RewRepFaction3')),
                ('rewrepfaction4', models.PositiveSmallIntegerField(db_column='RewRepFaction4')),
                ('rewrepfaction5', models.PositiveSmallIntegerField(db_column='RewRepFaction5')),
                ('rewrepvalue1', models.IntegerField(db_column='RewRepValue1')),
                ('rewrepvalue2', models.IntegerField(db_column='RewRepValue2')),
                ('rewrepvalue3', models.IntegerField(db_column='RewRepValue3')),
                ('rewrepvalue4', models.IntegerField(db_column='RewRepValue4')),
                ('rewrepvalue5', models.IntegerField(db_column='RewRepValue5')),
                ('rewmaxrepvalue1', models.IntegerField(db_column='RewMaxRepValue1')),
                ('rewmaxrepvalue2', models.IntegerField(db_column='RewMaxRepValue2')),
                ('rewmaxrepvalue3', models.IntegerField(db_column='RewMaxRepValue3')),
                ('rewmaxrepvalue4', models.IntegerField(db_column='RewMaxRepValue4')),
                ('rewmaxrepvalue5', models.IntegerField(db_column='RewMaxRepValue5')),
                ('rewhonorablekills', models.PositiveIntegerField(db_column='RewHonorableKills')),
                ('reworreqmoney', models.IntegerField(db_column='RewOrReqMoney')),
                ('rewmoneymaxlevel', models.PositiveIntegerField(db_column='RewMoneyMaxLevel')),
                ('rewspell', models.PositiveIntegerField(db_column='RewSpell')),
                ('rewspellcast', models.PositiveIntegerField(db_column='RewSpellCast')),
                ('rewmailtemplateid', models.PositiveIntegerField(db_column='RewMailTemplateId')),
                ('rewmaildelaysecs', models.PositiveIntegerField(db_column='RewMailDelaySecs')),
                ('pointmapid', models.PositiveSmallIntegerField(db_column='PointMapId')),
                ('pointx', models.FloatField(db_column='PointX')),
                ('pointy', models.FloatField(db_column='PointY')),
                ('pointopt', models.PositiveIntegerField(db_column='PointOpt')),
                ('detailsemote1', models.PositiveSmallIntegerField(db_column='DetailsEmote1')),
                ('detailsemote2', models.PositiveSmallIntegerField(db_column='DetailsEmote2')),
                ('detailsemote3', models.PositiveSmallIntegerField(db_column='DetailsEmote3')),
                ('detailsemote4', models.PositiveSmallIntegerField(db_column='DetailsEmote4')),
                ('detailsemotedelay1', models.PositiveIntegerField(db_column='DetailsEmoteDelay1')),
                ('detailsemotedelay2', models.PositiveIntegerField(db_column='DetailsEmoteDelay2')),
                ('detailsemotedelay3', models.PositiveIntegerField(db_column='DetailsEmoteDelay3')),
                ('detailsemotedelay4', models.PositiveIntegerField(db_column='DetailsEmoteDelay4')),
                ('incompleteemote', models.PositiveSmallIntegerField(db_column='IncompleteEmote')),
                ('incompleteemotedelay', models.PositiveIntegerField(db_column='IncompleteEmoteDelay')),
                ('completeemote', models.PositiveSmallIntegerField(db_column='CompleteEmote')),
                ('completeemotedelay', models.PositiveIntegerField(db_column='CompleteEmoteDelay')),
                ('offerrewardemote1', models.PositiveSmallIntegerField(db_column='OfferRewardEmote1')),
                ('offerrewardemote2', models.PositiveSmallIntegerField(db_column='OfferRewardEmote2')),
                ('offerrewardemote3', models.PositiveSmallIntegerField(db_column='OfferRewardEmote3')),
                ('offerrewardemote4', models.PositiveSmallIntegerField(db_column='OfferRewardEmote4')),
                ('offerrewardemotedelay1', models.PositiveIntegerField(db_column='OfferRewardEmoteDelay1')),
                ('offerrewardemotedelay2', models.PositiveIntegerField(db_column='OfferRewardEmoteDelay2')),
                ('offerrewardemotedelay3', models.PositiveIntegerField(db_column='OfferRewardEmoteDelay3')),
                ('offerrewardemotedelay4', models.PositiveIntegerField(db_column='OfferRewardEmoteDelay4')),
                ('startscript', models.PositiveIntegerField(db_column='StartScript')),
                ('completescript', models.PositiveIntegerField(db_column='CompleteScript')),
            ],
            options={
                'db_table': 'quest_template',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcReferenceLootTemplate',
            fields=[
                ('entry', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('item', models.PositiveIntegerField()),
                ('chanceorquestchance', models.FloatField(db_column='ChanceOrQuestChance')),
                ('groupid', models.PositiveIntegerField()),
                ('mincountorref', models.IntegerField(db_column='mincountOrRef')),
                ('maxcount', models.PositiveIntegerField()),
                ('condition_id', models.PositiveIntegerField()),
                ('comments', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'db_table': 'reference_loot_template',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcReferenceLootTemplateNames',
            fields=[
                ('entry', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'reference_loot_template_names',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbcSpellTemplate',
            fields=[
                ('id', models.PositiveIntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('category', models.PositiveIntegerField(db_column='Category')),
                ('castui', models.PositiveIntegerField(db_column='CastUI')),
                ('dispel', models.PositiveIntegerField(db_column='Dispel')),
                ('mechanic', models.PositiveIntegerField(db_column='Mechanic')),
                ('attributes', models.PositiveIntegerField(db_column='Attributes')),
                ('attributesex', models.PositiveIntegerField(db_column='AttributesEx')),
                ('attributesex2', models.PositiveIntegerField(db_column='AttributesEx2')),
                ('attributesex3', models.PositiveIntegerField(db_column='AttributesEx3')),
                ('attributesex4', models.PositiveIntegerField(db_column='AttributesEx4')),
                ('attributesex5', models.PositiveIntegerField(db_column='AttributesEx5')),
                ('attributesex6', models.PositiveIntegerField(db_column='AttributesEx6')),
                ('stances', models.PositiveIntegerField(db_column='Stances')),
                ('stancesnot', models.PositiveIntegerField(db_column='StancesNot')),
                ('targets', models.PositiveIntegerField(db_column='Targets')),
                ('targetcreaturetype', models.PositiveIntegerField(db_column='TargetCreatureType')),
                ('requiresspellfocus', models.PositiveIntegerField(db_column='RequiresSpellFocus')),
                ('facingcasterflags', models.PositiveIntegerField(db_column='FacingCasterFlags')),
                ('casteraurastate', models.PositiveIntegerField(db_column='CasterAuraState')),
                ('targetaurastate', models.PositiveIntegerField(db_column='TargetAuraState')),
                ('casteraurastatenot', models.PositiveIntegerField(db_column='CasterAuraStateNot')),
                ('targetaurastatenot', models.PositiveIntegerField(db_column='TargetAuraStateNot')),
                ('castingtimeindex', models.PositiveIntegerField(db_column='CastingTimeIndex')),
                ('recoverytime', models.PositiveIntegerField(db_column='RecoveryTime')),
                ('categoryrecoverytime', models.PositiveIntegerField(db_column='CategoryRecoveryTime')),
                ('interruptflags', models.PositiveIntegerField(db_column='InterruptFlags')),
                ('aurainterruptflags', models.PositiveIntegerField(db_column='AuraInterruptFlags')),
                ('channelinterruptflags', models.PositiveIntegerField(db_column='ChannelInterruptFlags')),
                ('procflags', models.PositiveIntegerField(db_column='ProcFlags')),
                ('procchance', models.PositiveIntegerField(db_column='ProcChance')),
                ('proccharges', models.PositiveIntegerField(db_column='ProcCharges')),
                ('maxlevel', models.PositiveIntegerField(db_column='MaxLevel')),
                ('baselevel', models.PositiveIntegerField(db_column='BaseLevel')),
                ('spelllevel', models.PositiveIntegerField(db_column='SpellLevel')),
                ('durationindex', models.PositiveIntegerField(db_column='DurationIndex')),
                ('powertype', models.PositiveIntegerField(db_column='PowerType')),
                ('manacost', models.PositiveIntegerField(db_column='ManaCost')),
                ('manacostperlevel', models.PositiveIntegerField(db_column='ManaCostPerlevel')),
                ('manapersecond', models.PositiveIntegerField(db_column='ManaPerSecond')),
                ('manapersecondperlevel', models.PositiveIntegerField(db_column='ManaPerSecondPerLevel')),
                ('rangeindex', models.PositiveIntegerField(db_column='RangeIndex')),
                ('speed', models.FloatField(db_column='Speed')),
                ('modalnextspell', models.PositiveIntegerField(db_column='ModalNextSpell')),
                ('stackamount', models.PositiveIntegerField(db_column='StackAmount')),
                ('totem1', models.PositiveIntegerField(db_column='Totem1')),
                ('totem2', models.PositiveIntegerField(db_column='Totem2')),
                ('reagent1', models.IntegerField(db_column='Reagent1')),
                ('reagent2', models.IntegerField(db_column='Reagent2')),
                ('reagent3', models.IntegerField(db_column='Reagent3')),
                ('reagent4', models.IntegerField(db_column='Reagent4')),
                ('reagent5', models.IntegerField(db_column='Reagent5')),
                ('reagent6', models.IntegerField(db_column='Reagent6')),
                ('reagent7', models.IntegerField(db_column='Reagent7')),
                ('reagent8', models.IntegerField(db_column='Reagent8')),
                ('reagentcount1', models.PositiveIntegerField(db_column='ReagentCount1')),
                ('reagentcount2', models.PositiveIntegerField(db_column='ReagentCount2')),
                ('reagentcount3', models.PositiveIntegerField(db_column='ReagentCount3')),
                ('reagentcount4', models.PositiveIntegerField(db_column='ReagentCount4')),
                ('reagentcount5', models.PositiveIntegerField(db_column='ReagentCount5')),
                ('reagentcount6', models.PositiveIntegerField(db_column='ReagentCount6')),
                ('reagentcount7', models.PositiveIntegerField(db_column='ReagentCount7')),
                ('reagentcount8', models.PositiveIntegerField(db_column='ReagentCount8')),
                ('equippeditemclass', models.IntegerField(db_column='EquippedItemClass')),
                ('equippeditemsubclassmask', models.IntegerField(db_column='EquippedItemSubClassMask')),
                ('equippediteminventorytypemask', models.IntegerField(db_column='EquippedItemInventoryTypeMask')),
                ('effect1', models.PositiveIntegerField(db_column='Effect1')),
                ('effect2', models.PositiveIntegerField(db_column='Effect2')),
                ('effect3', models.PositiveIntegerField(db_column='Effect3')),
                ('effectdiesides1', models.IntegerField(db_column='EffectDieSides1')),
                ('effectdiesides2', models.IntegerField(db_column='EffectDieSides2')),
                ('effectdiesides3', models.IntegerField(db_column='EffectDieSides3')),
                ('effectbasedice1', models.PositiveIntegerField(db_column='EffectBaseDice1')),
                ('effectbasedice2', models.PositiveIntegerField(db_column='EffectBaseDice2')),
                ('effectbasedice3', models.PositiveIntegerField(db_column='EffectBaseDice3')),
                ('effectdiceperlevel1', models.FloatField(db_column='EffectDicePerLevel1')),
                ('effectdiceperlevel2', models.FloatField(db_column='EffectDicePerLevel2')),
                ('effectdiceperlevel3', models.FloatField(db_column='EffectDicePerLevel3')),
                ('effectrealpointsperlevel1', models.FloatField(db_column='EffectRealPointsPerLevel1')),
                ('effectrealpointsperlevel2', models.FloatField(db_column='EffectRealPointsPerLevel2')),
                ('effectrealpointsperlevel3', models.FloatField(db_column='EffectRealPointsPerLevel3')),
                ('effectbasepoints1', models.IntegerField(db_column='EffectBasePoints1')),
                ('effectbasepoints2', models.IntegerField(db_column='EffectBasePoints2')),
                ('effectbasepoints3', models.IntegerField(db_column='EffectBasePoints3')),
                ('effectmechanic1', models.PositiveIntegerField(db_column='EffectMechanic1')),
                ('effectmechanic2', models.PositiveIntegerField(db_column='EffectMechanic2')),
                ('effectmechanic3', models.PositiveIntegerField(db_column='EffectMechanic3')),
                ('effectimplicittargeta1', models.PositiveIntegerField(db_column='EffectImplicitTargetA1')),
                ('effectimplicittargeta2', models.PositiveIntegerField(db_column='EffectImplicitTargetA2')),
                ('effectimplicittargeta3', models.PositiveIntegerField(db_column='EffectImplicitTargetA3')),
                ('effectimplicittargetb1', models.PositiveIntegerField(db_column='EffectImplicitTargetB1')),
                ('effectimplicittargetb2', models.PositiveIntegerField(db_column='EffectImplicitTargetB2')),
                ('effectimplicittargetb3', models.PositiveIntegerField(db_column='EffectImplicitTargetB3')),
                ('effectradiusindex1', models.PositiveIntegerField(db_column='EffectRadiusIndex1')),
                ('effectradiusindex2', models.PositiveIntegerField(db_column='EffectRadiusIndex2')),
                ('effectradiusindex3', models.PositiveIntegerField(db_column='EffectRadiusIndex3')),
                ('effectapplyauraname1', models.PositiveIntegerField(db_column='EffectApplyAuraName1')),
                ('effectapplyauraname2', models.PositiveIntegerField(db_column='EffectApplyAuraName2')),
                ('effectapplyauraname3', models.PositiveIntegerField(db_column='EffectApplyAuraName3')),
                ('effectamplitude1', models.PositiveIntegerField(db_column='EffectAmplitude1')),
                ('effectamplitude2', models.PositiveIntegerField(db_column='EffectAmplitude2')),
                ('effectamplitude3', models.PositiveIntegerField(db_column='EffectAmplitude3')),
                ('effectmultiplevalue1', models.FloatField(db_column='EffectMultipleValue1')),
                ('effectmultiplevalue2', models.FloatField(db_column='EffectMultipleValue2')),
                ('effectmultiplevalue3', models.FloatField(db_column='EffectMultipleValue3')),
                ('effectchaintarget1', models.PositiveIntegerField(db_column='EffectChainTarget1')),
                ('effectchaintarget2', models.PositiveIntegerField(db_column='EffectChainTarget2')),
                ('effectchaintarget3', models.PositiveIntegerField(db_column='EffectChainTarget3')),
                ('effectitemtype1', models.PositiveIntegerField(db_column='EffectItemType1')),
                ('effectitemtype2', models.PositiveIntegerField(db_column='EffectItemType2')),
                ('effectitemtype3', models.PositiveIntegerField(db_column='EffectItemType3')),
                ('effectmiscvalue1', models.IntegerField(db_column='EffectMiscValue1')),
                ('effectmiscvalue2', models.IntegerField(db_column='EffectMiscValue2')),
                ('effectmiscvalue3', models.IntegerField(db_column='EffectMiscValue3')),
                ('effectmiscvalueb1', models.IntegerField(db_column='EffectMiscValueB1')),
                ('effectmiscvalueb2', models.IntegerField(db_column='EffectMiscValueB2')),
                ('effectmiscvalueb3', models.IntegerField(db_column='EffectMiscValueB3')),
                ('effecttriggerspell1', models.PositiveIntegerField(db_column='EffectTriggerSpell1')),
                ('effecttriggerspell2', models.PositiveIntegerField(db_column='EffectTriggerSpell2')),
                ('effecttriggerspell3', models.PositiveIntegerField(db_column='EffectTriggerSpell3')),
                ('effectpointspercombopoint1', models.FloatField(db_column='EffectPointsPerComboPoint1')),
                ('effectpointspercombopoint2', models.FloatField(db_column='EffectPointsPerComboPoint2')),
                ('effectpointspercombopoint3', models.FloatField(db_column='EffectPointsPerComboPoint3')),
                ('spellvisual', models.PositiveIntegerField(db_column='SpellVisual')),
                ('spelliconid', models.PositiveIntegerField(db_column='SpellIconID')),
                ('activeiconid', models.PositiveIntegerField(db_column='ActiveIconID')),
                ('spellpriority', models.PositiveIntegerField(db_column='SpellPriority')),
                ('spellname', models.TextField(db_column='SpellName')),
                ('spellname2', models.TextField(blank=True, db_column='SpellName2', null=True)),
                ('spellname3', models.TextField(blank=True, db_column='SpellName3', null=True)),
                ('spellname4', models.TextField(blank=True, db_column='SpellName4', null=True)),
                ('spellname5', models.TextField(blank=True, db_column='SpellName5', null=True)),
                ('spellname6', models.TextField(blank=True, db_column='SpellName6', null=True)),
                ('spellname7', models.TextField(blank=True, db_column='SpellName7', null=True)),
                ('spellname8', models.TextField(blank=True, db_column='SpellName8', null=True)),
                ('spellname9', models.TextField(blank=True, db_column='SpellName9', null=True)),
                ('spellname10', models.TextField(blank=True, db_column='SpellName10', null=True)),
                ('spellname11', models.TextField(blank=True, db_column='SpellName11', null=True)),
                ('spellname12', models.TextField(blank=True, db_column='SpellName12', null=True)),
                ('spellname13', models.TextField(blank=True, db_column='SpellName13', null=True)),
                ('spellname14', models.TextField(blank=True, db_column='SpellName14', null=True)),
                ('spellname15', models.TextField(blank=True, db_column='SpellName15', null=True)),
                ('spellname16', models.TextField(blank=True, db_column='SpellName16', null=True)),
                ('rank1', models.TextField(blank=True, db_column='Rank1', null=True)),
                ('rank2', models.TextField(blank=True, db_column='Rank2', null=True)),
                ('rank3', models.TextField(blank=True, db_column='Rank3', null=True)),
                ('rank4', models.TextField(blank=True, db_column='Rank4', null=True)),
                ('rank5', models.TextField(blank=True, db_column='Rank5', null=True)),
                ('rank6', models.TextField(blank=True, db_column='Rank6', null=True)),
                ('rank7', models.TextField(blank=True, db_column='Rank7', null=True)),
                ('rank8', models.TextField(blank=True, db_column='Rank8', null=True)),
                ('rank9', models.TextField(blank=True, db_column='Rank9', null=True)),
                ('rank10', models.TextField(blank=True, db_column='Rank10', null=True)),
                ('rank11', models.TextField(blank=True, db_column='Rank11', null=True)),
                ('rank12', models.TextField(blank=True, db_column='Rank12', null=True)),
                ('rank13', models.TextField(blank=True, db_column='Rank13', null=True)),
                ('rank14', models.TextField(blank=True, db_column='Rank14', null=True)),
                ('rank15', models.TextField(blank=True, db_column='Rank15', null=True)),
                ('rank16', models.TextField(blank=True, db_column='Rank16', null=True)),
                ('manacostpercentage', models.PositiveIntegerField(db_column='ManaCostPercentage')),
                ('startrecoverycategory', models.PositiveIntegerField(db_column='StartRecoveryCategory')),
                ('startrecoverytime', models.PositiveIntegerField(db_column='StartRecoveryTime')),
                ('maxtargetlevel', models.PositiveIntegerField(db_column='MaxTargetLevel')),
                ('spellfamilyname', models.PositiveIntegerField(db_column='SpellFamilyName')),
                ('spellfamilyflags', models.PositiveBigIntegerField(db_column='SpellFamilyFlags')),
                ('maxaffectedtargets', models.PositiveIntegerField(db_column='MaxAffectedTargets')),
                ('dmgclass', models.PositiveIntegerField(db_column='DmgClass')),
                ('preventiontype', models.PositiveIntegerField(db_column='PreventionType')),
                ('stancebarorder', models.IntegerField(db_column='StanceBarOrder')),
                ('dmgmultiplier1', models.FloatField(db_column='DmgMultiplier1')),
                ('dmgmultiplier2', models.FloatField(db_column='DmgMultiplier2')),
                ('dmgmultiplier3', models.FloatField(db_column='DmgMultiplier3')),
                ('minfactionid', models.PositiveIntegerField(db_column='MinFactionId')),
                ('minreputation', models.PositiveIntegerField(db_column='MinReputation')),
                ('requiredauravision', models.PositiveIntegerField(db_column='RequiredAuraVision')),
                ('totemcategory1', models.PositiveIntegerField(db_column='TotemCategory1')),
                ('totemcategory2', models.PositiveIntegerField(db_column='TotemCategory2')),
                ('areaid', models.PositiveIntegerField(db_column='AreaId')),
                ('schoolmask', models.PositiveIntegerField(db_column='SchoolMask')),
                ('isserverside', models.PositiveIntegerField(db_column='IsServerSide')),
                ('attributesserverside', models.PositiveIntegerField(db_column='AttributesServerside')),
            ],
            options={
                'db_table': 'spell_template',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=32, unique=True)),
                ('gmlevel', models.PositiveIntegerField()),
                ('sessionkey', models.TextField(blank=True, null=True)),
                ('v', models.TextField(blank=True, null=True)),
                ('s', models.TextField(blank=True, null=True)),
                ('email', models.TextField(blank=True, null=True)),
                ('joindate', models.DateTimeField()),
                ('lockedip', models.CharField(db_column='lockedIp', max_length=30)),
                ('failed_logins', models.PositiveIntegerField()),
                ('locked', models.PositiveIntegerField()),
                ('last_login', models.DateTimeField()),
                ('active_realm_id', models.PositiveIntegerField()),
                ('expansion', models.PositiveIntegerField()),
                ('mutetime', models.PositiveBigIntegerField()),
                ('locale', models.CharField(max_length=4)),
                ('token', models.TextField(blank=True, null=True)),
                ('os', models.CharField(max_length=4)),
                ('platform', models.CharField(max_length=4)),
                ('flags', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'account',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkAchievementCriteriaData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('criteria_id', models.IntegerField(blank=True, null=True)),
                ('type', models.IntegerField(blank=True, null=True)),
                ('value1', models.IntegerField(blank=True, null=True)),
                ('value2', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'achievement_criteria_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkAchievementCriteriaRequirement',
            fields=[
                ('criteria_id', models.IntegerField(primary_key=True, serialize=False)),
                ('type', models.PositiveIntegerField()),
                ('value1', models.PositiveIntegerField()),
                ('value2', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'achievement_criteria_requirement',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkAchievementReward',
            fields=[
                ('entry', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('gender', models.IntegerField()),
                ('title_a', models.PositiveIntegerField(db_column='title_A')),
                ('title_h', models.PositiveIntegerField(db_column='title_H')),
                ('item', models.PositiveIntegerField()),
                ('sender', models.PositiveIntegerField()),
                ('subject', models.CharField(blank=True, max_length=255, null=True)),
                ('text', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'achievement_reward',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkCharacterAchievement',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('achievement', models.PositiveIntegerField()),
                ('date', models.PositiveBigIntegerField()),
            ],
            options={
                'db_table': 'character_achievement',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkCharacterAchievementProgress',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('criteria', models.PositiveIntegerField()),
                ('counter', models.PositiveIntegerField()),
                ('date', models.PositiveBigIntegerField()),
            ],
            options={
                'db_table': 'character_achievement_progress',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkCharacterAchievementSharedProgress',
            fields=[
                ('achievement', models.IntegerField(primary_key=True, serialize=False)),
                ('progress', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'character_achievement_shared_progress',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkCharacterInventory',
            fields=[
                ('guid', models.PositiveIntegerField()),
                ('bag', models.PositiveIntegerField()),
                ('slot', models.PositiveIntegerField()),
                ('item', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('item_template', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_inventory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkCharacterQueststatus',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('quest', models.PositiveIntegerField()),
                ('status', models.PositiveIntegerField()),
                ('rewarded', models.PositiveIntegerField()),
                ('explored', models.PositiveIntegerField()),
                ('timer', models.PositiveBigIntegerField()),
                ('mobcount1', models.PositiveIntegerField()),
                ('mobcount2', models.PositiveIntegerField()),
                ('mobcount3', models.PositiveIntegerField()),
                ('mobcount4', models.PositiveIntegerField()),
                ('itemcount1', models.PositiveIntegerField()),
                ('itemcount2', models.PositiveIntegerField()),
                ('itemcount3', models.PositiveIntegerField()),
                ('itemcount4', models.PositiveIntegerField()),
                ('itemcount5', models.PositiveIntegerField()),
                ('itemcount6', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_queststatus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkCharacterQueststatusDaily',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('quest', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_queststatus_daily',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkCharacterQueststatusMonthly',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('quest', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_queststatus_monthly',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkCharacterQueststatusWeekly',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('quest', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_queststatus_weekly',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkCharacterReputation',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('faction', models.PositiveIntegerField()),
                ('standing', models.IntegerField()),
                ('flags', models.IntegerField()),
            ],
            options={
                'db_table': 'character_reputation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkCharacters',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('account', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=12)),
                ('race', models.PositiveIntegerField()),
                ('class_field', models.PositiveIntegerField(db_column='class')),
                ('gender', models.PositiveIntegerField()),
                ('level', models.PositiveIntegerField()),
                ('xp', models.PositiveIntegerField()),
                ('money', models.PositiveIntegerField()),
                ('playerbytes', models.PositiveIntegerField(db_column='playerBytes')),
                ('playerbytes2', models.PositiveIntegerField(db_column='playerBytes2')),
                ('playerflags', models.PositiveIntegerField(db_column='playerFlags')),
                ('position_x', models.FloatField()),
                ('position_y', models.FloatField()),
                ('position_z', models.FloatField()),
                ('map', models.PositiveIntegerField()),
                ('dungeon_difficulty', models.PositiveIntegerField()),
                ('orientation', models.FloatField()),
                ('taximask', models.TextField(blank=True, null=True)),
                ('online', models.PositiveIntegerField()),
                ('cinematic', models.PositiveIntegerField()),
                ('totaltime', models.PositiveIntegerField()),
                ('leveltime', models.PositiveIntegerField()),
                ('logout_time', models.PositiveBigIntegerField()),
                ('is_logout_resting', models.PositiveIntegerField()),
                ('rest_bonus', models.FloatField()),
                ('resettalents_cost', models.PositiveIntegerField()),
                ('resettalents_time', models.PositiveBigIntegerField()),
                ('trans_x', models.FloatField()),
                ('trans_y', models.FloatField()),
                ('trans_z', models.FloatField()),
                ('trans_o', models.FloatField()),
                ('transguid', models.PositiveBigIntegerField()),
                ('extra_flags', models.PositiveIntegerField()),
                ('stable_slots', models.PositiveIntegerField()),
                ('at_login', models.PositiveIntegerField()),
                ('zone', models.PositiveIntegerField()),
                ('death_expire_time', models.PositiveBigIntegerField()),
                ('taxi_path', models.TextField(blank=True, null=True)),
                ('arenapoints', models.PositiveIntegerField(db_column='arenaPoints')),
                ('totalhonorpoints', models.PositiveIntegerField(db_column='totalHonorPoints')),
                ('todayhonorpoints', models.PositiveIntegerField(db_column='todayHonorPoints')),
                ('yesterdayhonorpoints', models.PositiveIntegerField(db_column='yesterdayHonorPoints')),
                ('totalkills', models.PositiveIntegerField(db_column='totalKills')),
                ('todaykills', models.PositiveSmallIntegerField(db_column='todayKills')),
                ('yesterdaykills', models.PositiveSmallIntegerField(db_column='yesterdayKills')),
                ('chosentitle', models.PositiveIntegerField(db_column='chosenTitle')),
                ('knowncurrencies', models.PositiveBigIntegerField(db_column='knownCurrencies')),
                ('watchedfaction', models.PositiveIntegerField(db_column='watchedFaction')),
                ('drunk', models.PositiveIntegerField()),
                ('health', models.PositiveIntegerField()),
                ('power1', models.PositiveIntegerField()),
                ('power2', models.PositiveIntegerField()),
                ('power3', models.PositiveIntegerField()),
                ('power4', models.PositiveIntegerField()),
                ('power5', models.PositiveIntegerField()),
                ('power6', models.PositiveIntegerField()),
                ('power7', models.PositiveIntegerField()),
                ('speccount', models.PositiveIntegerField(db_column='specCount')),
                ('activespec', models.PositiveIntegerField(db_column='activeSpec')),
                ('exploredzones', models.TextField(blank=True, db_column='exploredZones', null=True)),
                ('equipmentcache', models.TextField(blank=True, db_column='equipmentCache', null=True)),
                ('ammoid', models.PositiveIntegerField(db_column='ammoId')),
                ('knowntitles', models.TextField(blank=True, db_column='knownTitles', null=True)),
                ('actionbars', models.PositiveIntegerField(db_column='actionBars')),
                ('grantablelevels', models.PositiveIntegerField(blank=True, db_column='grantableLevels', null=True)),
                ('fishingsteps', models.PositiveIntegerField(db_column='fishingSteps')),
                ('deleteinfos_account', models.PositiveIntegerField(blank=True, db_column='deleteInfos_Account', null=True)),
                ('deleteinfos_name', models.CharField(blank=True, db_column='deleteInfos_Name', max_length=12, null=True)),
                ('deletedate', models.PositiveBigIntegerField(blank=True, db_column='deleteDate', null=True)),
            ],
            options={
                'db_table': 'characters',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkCharacterSkills',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('skill', models.PositiveIntegerField()),
                ('value', models.PositiveIntegerField()),
                ('max', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_skills',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkCharacterSpell',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('spell', models.PositiveIntegerField()),
                ('active', models.PositiveIntegerField()),
                ('disabled', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'character_spell',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkCreatureLootTemplate',
            fields=[
                ('entry', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('item', models.PositiveIntegerField()),
                ('chanceorquestchance', models.FloatField(db_column='ChanceOrQuestChance')),
                ('groupid', models.PositiveIntegerField()),
                ('mincountorref', models.IntegerField(db_column='mincountOrRef')),
                ('maxcount', models.PositiveIntegerField()),
                ('condition_id', models.PositiveIntegerField()),
                ('comments', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'db_table': 'creature_loot_template',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkItemInstance',
            fields=[
                ('guid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('owner_guid', models.PositiveIntegerField()),
                ('itementry', models.PositiveIntegerField(db_column='itemEntry')),
                ('creatorguid', models.PositiveIntegerField(db_column='creatorGuid')),
                ('giftcreatorguid', models.PositiveIntegerField(db_column='giftCreatorGuid')),
                ('count', models.PositiveIntegerField()),
                ('duration', models.PositiveIntegerField()),
                ('charges', models.TextField()),
                ('flags', models.PositiveIntegerField()),
                ('enchantments', models.TextField()),
                ('randompropertyid', models.SmallIntegerField(db_column='randomPropertyId')),
                ('durability', models.PositiveIntegerField()),
                ('playedtime', models.PositiveIntegerField(db_column='playedTime')),
                ('text', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'item_instance',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkItemLootTemplate',
            fields=[
                ('entry', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('item', models.PositiveIntegerField()),
                ('chanceorquestchance', models.FloatField(db_column='ChanceOrQuestChance')),
                ('groupid', models.PositiveIntegerField()),
                ('mincountorref', models.IntegerField(db_column='mincountOrRef')),
                ('maxcount', models.PositiveSmallIntegerField()),
                ('condition_id', models.PositiveIntegerField()),
                ('comments', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'db_table': 'item_loot_template',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkItemTemplate',
            fields=[
                ('entry', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('class_field', models.PositiveIntegerField(db_column='class')),
                ('subclass', models.PositiveIntegerField()),
                ('unk0', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('displayid', models.PositiveIntegerField()),
                ('quality', models.PositiveIntegerField(db_column='Quality')),
                ('flags', models.PositiveIntegerField(db_column='Flags')),
                ('flags2', models.PositiveIntegerField(db_column='Flags2')),
                ('buycount', models.PositiveIntegerField(db_column='BuyCount')),
                ('buyprice', models.PositiveIntegerField(db_column='BuyPrice')),
                ('sellprice', models.PositiveIntegerField(db_column='SellPrice')),
                ('inventorytype', models.PositiveIntegerField(db_column='InventoryType')),
                ('allowableclass', models.IntegerField(db_column='AllowableClass')),
                ('allowablerace', models.IntegerField(db_column='AllowableRace')),
                ('itemlevel', models.PositiveSmallIntegerField(db_column='ItemLevel')),
                ('requiredlevel', models.PositiveIntegerField(db_column='RequiredLevel')),
                ('requiredskill', models.PositiveSmallIntegerField(db_column='RequiredSkill')),
                ('requiredskillrank', models.PositiveSmallIntegerField(db_column='RequiredSkillRank')),
                ('requiredspell', models.PositiveIntegerField()),
                ('requiredhonorrank', models.PositiveIntegerField()),
                ('requiredcityrank', models.PositiveIntegerField(db_column='RequiredCityRank')),
                ('requiredreputationfaction', models.PositiveSmallIntegerField(db_column='RequiredReputationFaction')),
                ('requiredreputationrank', models.PositiveSmallIntegerField(db_column='RequiredReputationRank')),
                ('maxcount', models.SmallIntegerField()),
                ('stackable', models.SmallIntegerField()),
                ('containerslots', models.PositiveIntegerField(db_column='ContainerSlots')),
                ('statscount', models.PositiveIntegerField(db_column='StatsCount')),
                ('stat_type1', models.PositiveIntegerField()),
                ('stat_value1', models.SmallIntegerField()),
                ('stat_type2', models.PositiveIntegerField()),
                ('stat_value2', models.SmallIntegerField()),
                ('stat_type3', models.PositiveIntegerField()),
                ('stat_value3', models.SmallIntegerField()),
                ('stat_type4', models.PositiveIntegerField()),
                ('stat_value4', models.SmallIntegerField()),
                ('stat_type5', models.PositiveIntegerField()),
                ('stat_value5', models.SmallIntegerField()),
                ('stat_type6', models.PositiveIntegerField()),
                ('stat_value6', models.SmallIntegerField()),
                ('stat_type7', models.PositiveIntegerField()),
                ('stat_value7', models.SmallIntegerField()),
                ('stat_type8', models.PositiveIntegerField()),
                ('stat_value8', models.SmallIntegerField()),
                ('stat_type9', models.PositiveIntegerField()),
                ('stat_value9', models.SmallIntegerField()),
                ('stat_type10', models.PositiveIntegerField()),
                ('stat_value10', models.SmallIntegerField()),
                ('scalingstatdistribution', models.SmallIntegerField(db_column='ScalingStatDistribution')),
                ('scalingstatvalue', models.PositiveIntegerField(db_column='ScalingStatValue')),
                ('dmg_min1', models.FloatField()),
                ('dmg_max1', models.FloatField()),
                ('dmg_type1', models.PositiveIntegerField()),
                ('dmg_min2', models.FloatField()),
                ('dmg_max2', models.FloatField()),
                ('dmg_type2', models.PositiveIntegerField()),
                ('armor', models.PositiveSmallIntegerField()),
                ('holy_res', models.PositiveIntegerField()),
                ('fire_res', models.PositiveIntegerField()),
                ('nature_res', models.PositiveIntegerField()),
                ('frost_res', models.PositiveIntegerField()),
                ('shadow_res', models.PositiveIntegerField()),
                ('arcane_res', models.PositiveIntegerField()),
                ('delay', models.PositiveSmallIntegerField()),
                ('ammo_type', models.PositiveIntegerField()),
                ('rangedmodrange', models.FloatField(db_column='RangedModRange')),
                ('spellid_1', models.PositiveIntegerField()),
                ('spelltrigger_1', models.PositiveIntegerField()),
                ('spellcharges_1', models.SmallIntegerField()),
                ('spellppmrate_1', models.FloatField(db_column='spellppmRate_1')),
                ('spellcooldown_1', models.IntegerField()),
                ('spellcategory_1', models.PositiveSmallIntegerField()),
                ('spellcategorycooldown_1', models.IntegerField()),
                ('spellid_2', models.PositiveIntegerField()),
                ('spelltrigger_2', models.PositiveIntegerField()),
                ('spellcharges_2', models.SmallIntegerField()),
                ('spellppmrate_2', models.FloatField(db_column='spellppmRate_2')),
                ('spellcooldown_2', models.IntegerField()),
                ('spellcategory_2', models.PositiveSmallIntegerField()),
                ('spellcategorycooldown_2', models.IntegerField()),
                ('spellid_3', models.PositiveIntegerField()),
                ('spelltrigger_3', models.PositiveIntegerField()),
                ('spellcharges_3', models.SmallIntegerField()),
                ('spellppmrate_3', models.FloatField(db_column='spellppmRate_3')),
                ('spellcooldown_3', models.IntegerField()),
                ('spellcategory_3', models.PositiveSmallIntegerField()),
                ('spellcategorycooldown_3', models.IntegerField()),
                ('spellid_4', models.PositiveIntegerField()),
                ('spelltrigger_4', models.PositiveIntegerField()),
                ('spellcharges_4', models.SmallIntegerField()),
                ('spellppmrate_4', models.FloatField(db_column='spellppmRate_4')),
                ('spellcooldown_4', models.IntegerField()),
                ('spellcategory_4', models.PositiveSmallIntegerField()),
                ('spellcategorycooldown_4', models.IntegerField()),
                ('spellid_5', models.PositiveIntegerField()),
                ('spelltrigger_5', models.PositiveIntegerField()),
                ('spellcharges_5', models.SmallIntegerField()),
                ('spellppmrate_5', models.FloatField(db_column='spellppmRate_5')),
                ('spellcooldown_5', models.IntegerField()),
                ('spellcategory_5', models.PositiveSmallIntegerField()),
                ('spellcategorycooldown_5', models.IntegerField()),
                ('bonding', models.PositiveIntegerField()),
                ('description', models.CharField(max_length=255)),
                ('pagetext', models.PositiveIntegerField(db_column='PageText')),
                ('languageid', models.PositiveIntegerField(db_column='LanguageID')),
                ('pagematerial', models.PositiveIntegerField(db_column='PageMaterial')),
                ('startquest', models.PositiveIntegerField()),
                ('lockid', models.PositiveIntegerField()),
                ('material', models.IntegerField(db_column='Material')),
                ('sheath', models.PositiveIntegerField()),
                ('randomproperty', models.PositiveIntegerField(db_column='RandomProperty')),
                ('randomsuffix', models.PositiveIntegerField(db_column='RandomSuffix')),
                ('block', models.PositiveIntegerField()),
                ('itemset', models.PositiveIntegerField()),
                ('maxdurability', models.PositiveSmallIntegerField(db_column='MaxDurability')),
                ('area', models.PositiveIntegerField()),
                ('map', models.SmallIntegerField(db_column='Map')),
                ('bagfamily', models.IntegerField(db_column='BagFamily')),
                ('totemcategory', models.IntegerField(db_column='TotemCategory')),
                ('socketcolor_1', models.IntegerField(db_column='socketColor_1')),
                ('socketcontent_1', models.IntegerField(db_column='socketContent_1')),
                ('socketcolor_2', models.IntegerField(db_column='socketColor_2')),
                ('socketcontent_2', models.IntegerField(db_column='socketContent_2')),
                ('socketcolor_3', models.IntegerField(db_column='socketColor_3')),
                ('socketcontent_3', models.IntegerField(db_column='socketContent_3')),
                ('socketbonus', models.IntegerField(db_column='socketBonus')),
                ('gemproperties', models.IntegerField(db_column='GemProperties')),
                ('requireddisenchantskill', models.SmallIntegerField(db_column='RequiredDisenchantSkill')),
                ('armordamagemodifier', models.FloatField(db_column='ArmorDamageModifier')),
                ('duration', models.PositiveIntegerField(db_column='Duration')),
                ('itemlimitcategory', models.SmallIntegerField(db_column='ItemLimitCategory')),
                ('holidayid', models.PositiveIntegerField(db_column='HolidayId')),
                ('scriptname', models.CharField(db_column='ScriptName', max_length=64)),
                ('disenchantid', models.PositiveIntegerField(db_column='DisenchantID')),
                ('foodtype', models.PositiveIntegerField(db_column='FoodType')),
                ('minmoneyloot', models.PositiveIntegerField(db_column='minMoneyLoot')),
                ('maxmoneyloot', models.PositiveIntegerField(db_column='maxMoneyLoot')),
                ('extraflags', models.PositiveIntegerField(db_column='ExtraFlags')),
            ],
            options={
                'db_table': 'item_template',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkMail',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('messagetype', models.PositiveIntegerField(db_column='messageType')),
                ('stationery', models.IntegerField()),
                ('mailtemplateid', models.PositiveIntegerField(db_column='mailTemplateId')),
                ('sender', models.PositiveIntegerField()),
                ('receiver', models.PositiveIntegerField()),
                ('subject', models.TextField(blank=True, null=True)),
                ('body', models.TextField(blank=True, null=True)),
                ('has_items', models.PositiveIntegerField()),
                ('expire_time', models.PositiveBigIntegerField()),
                ('deliver_time', models.PositiveBigIntegerField()),
                ('money', models.PositiveIntegerField()),
                ('cod', models.PositiveIntegerField()),
                ('checked', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'mail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkMailItems',
            fields=[
                ('mail_id', models.IntegerField(primary_key=True, serialize=False)),
                ('item_guid', models.IntegerField()),
                ('item_template', models.IntegerField()),
                ('receiver', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'mail_items',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkMailLevelReward',
            fields=[
                ('level', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('racemask', models.PositiveIntegerField(db_column='raceMask')),
                ('mailtemplateid', models.PositiveIntegerField(db_column='mailTemplateId')),
                ('senderentry', models.PositiveIntegerField(db_column='senderEntry')),
            ],
            options={
                'db_table': 'mail_level_reward',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkMailLootTemplate',
            fields=[
                ('entry', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('item', models.PositiveIntegerField()),
                ('chanceorquestchance', models.FloatField(db_column='ChanceOrQuestChance')),
                ('groupid', models.PositiveIntegerField()),
                ('mincountorref', models.IntegerField(db_column='mincountOrRef')),
                ('maxcount', models.PositiveIntegerField()),
                ('condition_id', models.PositiveIntegerField()),
                ('comments', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'db_table': 'mail_loot_template',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkPvpstatsPlayers',
            fields=[
                ('battleground_id', models.PositiveBigIntegerField(primary_key=True, serialize=False)),
                ('character_guid', models.PositiveIntegerField()),
                ('score_killing_blows', models.PositiveIntegerField()),
                ('score_deaths', models.PositiveIntegerField()),
                ('score_honorable_kills', models.PositiveIntegerField()),
                ('score_bonus_honor', models.PositiveIntegerField()),
                ('score_damage_done', models.PositiveIntegerField()),
                ('score_healing_done', models.PositiveIntegerField()),
                ('attr_1', models.PositiveIntegerField()),
                ('attr_2', models.PositiveIntegerField()),
                ('attr_3', models.PositiveIntegerField()),
                ('attr_4', models.PositiveIntegerField()),
                ('attr_5', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'pvpstats_players',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkQuestTemplate',
            fields=[
                ('entry', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('method', models.PositiveIntegerField(db_column='Method')),
                ('zoneorsort', models.SmallIntegerField(db_column='ZoneOrSort')),
                ('minlevel', models.PositiveIntegerField(db_column='MinLevel')),
                ('maxlevel', models.PositiveIntegerField(db_column='MaxLevel')),
                ('questlevel', models.SmallIntegerField(db_column='QuestLevel')),
                ('type', models.PositiveSmallIntegerField(db_column='Type')),
                ('requiredclasses', models.PositiveSmallIntegerField(db_column='RequiredClasses')),
                ('requiredraces', models.PositiveSmallIntegerField(db_column='RequiredRaces')),
                ('requiredskill', models.PositiveSmallIntegerField(db_column='RequiredSkill')),
                ('requiredskillvalue', models.PositiveSmallIntegerField(db_column='RequiredSkillValue')),
                ('requiredcondition', models.PositiveIntegerField(db_column='RequiredCondition')),
                ('repobjectivefaction', models.PositiveSmallIntegerField(db_column='RepObjectiveFaction')),
                ('repobjectivevalue', models.IntegerField(db_column='RepObjectiveValue')),
                ('requiredminrepfaction', models.PositiveSmallIntegerField(db_column='RequiredMinRepFaction')),
                ('requiredminrepvalue', models.IntegerField(db_column='RequiredMinRepValue')),
                ('requiredmaxrepfaction', models.PositiveSmallIntegerField(db_column='RequiredMaxRepFaction')),
                ('requiredmaxrepvalue', models.IntegerField(db_column='RequiredMaxRepValue')),
                ('suggestedplayers', models.PositiveIntegerField(db_column='SuggestedPlayers')),
                ('limittime', models.PositiveIntegerField(db_column='LimitTime')),
                ('questflags', models.PositiveIntegerField(db_column='QuestFlags')),
                ('specialflags', models.PositiveIntegerField(db_column='SpecialFlags')),
                ('chartitleid', models.PositiveIntegerField(db_column='CharTitleId')),
                ('playersslain', models.PositiveIntegerField(db_column='PlayersSlain')),
                ('bonustalents', models.PositiveIntegerField(db_column='BonusTalents')),
                ('prevquestid', models.IntegerField(db_column='PrevQuestId')),
                ('nextquestid', models.IntegerField(db_column='NextQuestId')),
                ('exclusivegroup', models.IntegerField(db_column='ExclusiveGroup')),
                ('breadcrumbforquestid', models.PositiveIntegerField(db_column='BreadcrumbForQuestId')),
                ('nextquestinchain', models.PositiveIntegerField(db_column='NextQuestInChain')),
                ('rewxpid', models.PositiveIntegerField(db_column='RewXPId')),
                ('srcitemid', models.PositiveIntegerField(db_column='SrcItemId')),
                ('srcitemcount', models.PositiveIntegerField(db_column='SrcItemCount')),
                ('srcspell', models.PositiveIntegerField(db_column='SrcSpell')),
                ('title', models.TextField(blank=True, db_column='Title', null=True)),
                ('details', models.TextField(blank=True, db_column='Details', null=True)),
                ('objectives', models.TextField(blank=True, db_column='Objectives', null=True)),
                ('offerrewardtext', models.TextField(blank=True, db_column='OfferRewardText', null=True)),
                ('requestitemstext', models.TextField(blank=True, db_column='RequestItemsText', null=True)),
                ('endtext', models.TextField(blank=True, db_column='EndText', null=True)),
                ('completedtext', models.TextField(blank=True, db_column='CompletedText', null=True)),
                ('objectivetext1', models.TextField(blank=True, db_column='ObjectiveText1', null=True)),
                ('objectivetext2', models.TextField(blank=True, db_column='ObjectiveText2', null=True)),
                ('objectivetext3', models.TextField(blank=True, db_column='ObjectiveText3', null=True)),
                ('objectivetext4', models.TextField(blank=True, db_column='ObjectiveText4', null=True)),
                ('reqitemid1', models.PositiveIntegerField(db_column='ReqItemId1')),
                ('reqitemid2', models.PositiveIntegerField(db_column='ReqItemId2')),
                ('reqitemid3', models.PositiveIntegerField(db_column='ReqItemId3')),
                ('reqitemid4', models.PositiveIntegerField(db_column='ReqItemId4')),
                ('reqitemid5', models.PositiveIntegerField(db_column='ReqItemId5')),
                ('reqitemid6', models.PositiveIntegerField(db_column='ReqItemId6')),
                ('reqitemcount1', models.PositiveSmallIntegerField(db_column='ReqItemCount1')),
                ('reqitemcount2', models.PositiveSmallIntegerField(db_column='ReqItemCount2')),
                ('reqitemcount3', models.PositiveSmallIntegerField(db_column='ReqItemCount3')),
                ('reqitemcount4', models.PositiveSmallIntegerField(db_column='ReqItemCount4')),
                ('reqitemcount5', models.PositiveSmallIntegerField(db_column='ReqItemCount5')),
                ('reqitemcount6', models.PositiveSmallIntegerField(db_column='ReqItemCount6')),
                ('reqsourceid1', models.PositiveIntegerField(db_column='ReqSourceId1')),
                ('reqsourceid2', models.PositiveIntegerField(db_column='ReqSourceId2')),
                ('reqsourceid3', models.PositiveIntegerField(db_column='ReqSourceId3')),
                ('reqsourceid4', models.PositiveIntegerField(db_column='ReqSourceId4')),
                ('reqsourcecount1', models.PositiveSmallIntegerField(db_column='ReqSourceCount1')),
                ('reqsourcecount2', models.PositiveSmallIntegerField(db_column='ReqSourceCount2')),
                ('reqsourcecount3', models.PositiveSmallIntegerField(db_column='ReqSourceCount3')),
                ('reqsourcecount4', models.PositiveSmallIntegerField(db_column='ReqSourceCount4')),
                ('reqcreatureorgoid1', models.IntegerField(db_column='ReqCreatureOrGOId1')),
                ('reqcreatureorgoid2', models.IntegerField(db_column='ReqCreatureOrGOId2')),
                ('reqcreatureorgoid3', models.IntegerField(db_column='ReqCreatureOrGOId3')),
                ('reqcreatureorgoid4', models.IntegerField(db_column='ReqCreatureOrGOId4')),
                ('reqcreatureorgocount1', models.PositiveSmallIntegerField(db_column='ReqCreatureOrGOCount1')),
                ('reqcreatureorgocount2', models.PositiveSmallIntegerField(db_column='ReqCreatureOrGOCount2')),
                ('reqcreatureorgocount3', models.PositiveSmallIntegerField(db_column='ReqCreatureOrGOCount3')),
                ('reqcreatureorgocount4', models.PositiveSmallIntegerField(db_column='ReqCreatureOrGOCount4')),
                ('reqspellcast1', models.PositiveIntegerField(db_column='ReqSpellCast1')),
                ('reqspellcast2', models.PositiveIntegerField(db_column='ReqSpellCast2')),
                ('reqspellcast3', models.PositiveIntegerField(db_column='ReqSpellCast3')),
                ('reqspellcast4', models.PositiveIntegerField(db_column='ReqSpellCast4')),
                ('rewchoiceitemid1', models.PositiveIntegerField(db_column='RewChoiceItemId1')),
                ('rewchoiceitemid2', models.PositiveIntegerField(db_column='RewChoiceItemId2')),
                ('rewchoiceitemid3', models.PositiveIntegerField(db_column='RewChoiceItemId3')),
                ('rewchoiceitemid4', models.PositiveIntegerField(db_column='RewChoiceItemId4')),
                ('rewchoiceitemid5', models.PositiveIntegerField(db_column='RewChoiceItemId5')),
                ('rewchoiceitemid6', models.PositiveIntegerField(db_column='RewChoiceItemId6')),
                ('rewchoiceitemcount1', models.PositiveSmallIntegerField(db_column='RewChoiceItemCount1')),
                ('rewchoiceitemcount2', models.PositiveSmallIntegerField(db_column='RewChoiceItemCount2')),
                ('rewchoiceitemcount3', models.PositiveSmallIntegerField(db_column='RewChoiceItemCount3')),
                ('rewchoiceitemcount4', models.PositiveSmallIntegerField(db_column='RewChoiceItemCount4')),
                ('rewchoiceitemcount5', models.PositiveSmallIntegerField(db_column='RewChoiceItemCount5')),
                ('rewchoiceitemcount6', models.PositiveSmallIntegerField(db_column='RewChoiceItemCount6')),
                ('rewitemid1', models.PositiveIntegerField(db_column='RewItemId1')),
                ('rewitemid2', models.PositiveIntegerField(db_column='RewItemId2')),
                ('rewitemid3', models.PositiveIntegerField(db_column='RewItemId3')),
                ('rewitemid4', models.PositiveIntegerField(db_column='RewItemId4')),
                ('rewitemcount1', models.PositiveSmallIntegerField(db_column='RewItemCount1')),
                ('rewitemcount2', models.PositiveSmallIntegerField(db_column='RewItemCount2')),
                ('rewitemcount3', models.PositiveSmallIntegerField(db_column='RewItemCount3')),
                ('rewitemcount4', models.PositiveSmallIntegerField(db_column='RewItemCount4')),
                ('rewrepfaction1', models.PositiveSmallIntegerField(db_column='RewRepFaction1')),
                ('rewrepfaction2', models.PositiveSmallIntegerField(db_column='RewRepFaction2')),
                ('rewrepfaction3', models.PositiveSmallIntegerField(db_column='RewRepFaction3')),
                ('rewrepfaction4', models.PositiveSmallIntegerField(db_column='RewRepFaction4')),
                ('rewrepfaction5', models.PositiveSmallIntegerField(db_column='RewRepFaction5')),
                ('rewrepvalueid1', models.IntegerField(db_column='RewRepValueId1')),
                ('rewrepvalueid2', models.IntegerField(db_column='RewRepValueId2')),
                ('rewrepvalueid3', models.IntegerField(db_column='RewRepValueId3')),
                ('rewrepvalueid4', models.IntegerField(db_column='RewRepValueId4')),
                ('rewrepvalueid5', models.IntegerField(db_column='RewRepValueId5')),
                ('rewrepvalue1', models.IntegerField(db_column='RewRepValue1')),
                ('rewrepvalue2', models.IntegerField(db_column='RewRepValue2')),
                ('rewrepvalue3', models.IntegerField(db_column='RewRepValue3')),
                ('rewrepvalue4', models.IntegerField(db_column='RewRepValue4')),
                ('rewrepvalue5', models.IntegerField(db_column='RewRepValue5')),
                ('rewmaxrepvalue1', models.IntegerField(db_column='RewMaxRepValue1')),
                ('rewmaxrepvalue2', models.IntegerField(db_column='RewMaxRepValue2')),
                ('rewmaxrepvalue3', models.IntegerField(db_column='RewMaxRepValue3')),
                ('rewmaxrepvalue4', models.IntegerField(db_column='RewMaxRepValue4')),
                ('rewmaxrepvalue5', models.IntegerField(db_column='RewMaxRepValue5')),
                ('rewhonoraddition', models.PositiveIntegerField(db_column='RewHonorAddition')),
                ('rewhonormultiplier', models.FloatField(db_column='RewHonorMultiplier')),
                ('reworreqmoney', models.IntegerField(db_column='RewOrReqMoney')),
                ('rewmoneymaxlevel', models.PositiveIntegerField(db_column='RewMoneyMaxLevel')),
                ('rewspell', models.PositiveIntegerField(db_column='RewSpell')),
                ('rewspellcast', models.PositiveIntegerField(db_column='RewSpellCast')),
                ('rewmailtemplateid', models.PositiveIntegerField(db_column='RewMailTemplateId')),
                ('rewmaildelaysecs', models.PositiveIntegerField(db_column='RewMailDelaySecs')),
                ('pointmapid', models.PositiveSmallIntegerField(db_column='PointMapId')),
                ('pointx', models.FloatField(db_column='PointX')),
                ('pointy', models.FloatField(db_column='PointY')),
                ('pointopt', models.PositiveIntegerField(db_column='PointOpt')),
                ('detailsemote1', models.PositiveSmallIntegerField(db_column='DetailsEmote1')),
                ('detailsemote2', models.PositiveSmallIntegerField(db_column='DetailsEmote2')),
                ('detailsemote3', models.PositiveSmallIntegerField(db_column='DetailsEmote3')),
                ('detailsemote4', models.PositiveSmallIntegerField(db_column='DetailsEmote4')),
                ('detailsemotedelay1', models.PositiveIntegerField(db_column='DetailsEmoteDelay1')),
                ('detailsemotedelay2', models.PositiveIntegerField(db_column='DetailsEmoteDelay2')),
                ('detailsemotedelay3', models.PositiveIntegerField(db_column='DetailsEmoteDelay3')),
                ('detailsemotedelay4', models.PositiveIntegerField(db_column='DetailsEmoteDelay4')),
                ('incompleteemote', models.PositiveSmallIntegerField(db_column='IncompleteEmote')),
                ('incompleteemotedelay', models.PositiveIntegerField(db_column='IncompleteEmoteDelay')),
                ('completeemote', models.PositiveSmallIntegerField(db_column='CompleteEmote')),
                ('completeemotedelay', models.PositiveIntegerField(db_column='CompleteEmoteDelay')),
                ('offerrewardemote1', models.PositiveSmallIntegerField(db_column='OfferRewardEmote1')),
                ('offerrewardemote2', models.PositiveSmallIntegerField(db_column='OfferRewardEmote2')),
                ('offerrewardemote3', models.PositiveSmallIntegerField(db_column='OfferRewardEmote3')),
                ('offerrewardemote4', models.PositiveSmallIntegerField(db_column='OfferRewardEmote4')),
                ('offerrewardemotedelay1', models.PositiveIntegerField(db_column='OfferRewardEmoteDelay1')),
                ('offerrewardemotedelay2', models.PositiveIntegerField(db_column='OfferRewardEmoteDelay2')),
                ('offerrewardemotedelay3', models.PositiveIntegerField(db_column='OfferRewardEmoteDelay3')),
                ('offerrewardemotedelay4', models.PositiveIntegerField(db_column='OfferRewardEmoteDelay4')),
                ('startscript', models.PositiveIntegerField(db_column='StartScript')),
                ('completescript', models.PositiveIntegerField(db_column='CompleteScript')),
            ],
            options={
                'db_table': 'quest_template',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkReferenceLootTemplate',
            fields=[
                ('entry', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('item', models.PositiveIntegerField()),
                ('chanceorquestchance', models.FloatField(db_column='ChanceOrQuestChance')),
                ('groupid', models.PositiveIntegerField()),
                ('mincountorref', models.IntegerField(db_column='mincountOrRef')),
                ('maxcount', models.PositiveIntegerField()),
                ('condition_id', models.PositiveIntegerField()),
                ('comments', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'db_table': 'reference_loot_template',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkReferenceLootTemplateNames',
            fields=[
                ('entry', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'reference_loot_template_names',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkSpellLootTemplate',
            fields=[
                ('entry', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('item', models.PositiveIntegerField()),
                ('chanceorquestchance', models.FloatField(db_column='ChanceOrQuestChance')),
                ('groupid', models.PositiveIntegerField()),
                ('mincountorref', models.IntegerField(db_column='mincountOrRef')),
                ('maxcount', models.PositiveIntegerField()),
                ('condition_id', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'spell_loot_template',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WotlkSpellTemplate',
            fields=[
                ('id', models.PositiveIntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('category', models.PositiveIntegerField(db_column='Category')),
                ('dispel', models.PositiveIntegerField(db_column='Dispel')),
                ('mechanic', models.PositiveIntegerField(db_column='Mechanic')),
                ('attributes', models.PositiveIntegerField(db_column='Attributes')),
                ('attributesex', models.PositiveIntegerField(db_column='AttributesEx')),
                ('attributesex2', models.PositiveIntegerField(db_column='AttributesEx2')),
                ('attributesex3', models.PositiveIntegerField(db_column='AttributesEx3')),
                ('attributesex4', models.PositiveIntegerField(db_column='AttributesEx4')),
                ('attributesex5', models.PositiveIntegerField(db_column='AttributesEx5')),
                ('attributesex6', models.PositiveIntegerField(db_column='AttributesEx6')),
                ('attributesex7', models.PositiveIntegerField(db_column='AttributesEx7')),
                ('stances', models.PositiveIntegerField(db_column='Stances')),
                ('stances2', models.PositiveIntegerField(db_column='Stances2')),
                ('stancesnot', models.PositiveIntegerField(db_column='StancesNot')),
                ('stancesnot2', models.PositiveIntegerField(db_column='StancesNot2')),
                ('targets', models.PositiveIntegerField(db_column='Targets')),
                ('targetcreaturetype', models.PositiveIntegerField(db_column='TargetCreatureType')),
                ('requiresspellfocus', models.PositiveIntegerField(db_column='RequiresSpellFocus')),
                ('facingcasterflags', models.PositiveIntegerField(db_column='FacingCasterFlags')),
                ('casteraurastate', models.PositiveIntegerField(db_column='CasterAuraState')),
                ('targetaurastate', models.PositiveIntegerField(db_column='TargetAuraState')),
                ('casteraurastatenot', models.PositiveIntegerField(db_column='CasterAuraStateNot')),
                ('targetaurastatenot', models.PositiveIntegerField(db_column='TargetAuraStateNot')),
                ('casterauraspell', models.PositiveIntegerField(db_column='CasterAuraSpell')),
                ('targetauraspell', models.PositiveIntegerField(db_column='TargetAuraSpell')),
                ('excludecasterauraspell', models.PositiveIntegerField(db_column='ExcludeCasterAuraSpell')),
                ('excludetargetauraspell', models.PositiveIntegerField(db_column='ExcludeTargetAuraSpell')),
                ('castingtimeindex', models.PositiveIntegerField(db_column='CastingTimeIndex')),
                ('recoverytime', models.PositiveIntegerField(db_column='RecoveryTime')),
                ('categoryrecoverytime', models.PositiveIntegerField(db_column='CategoryRecoveryTime')),
                ('interruptflags', models.PositiveIntegerField(db_column='InterruptFlags')),
                ('aurainterruptflags', models.PositiveIntegerField(db_column='AuraInterruptFlags')),
                ('channelinterruptflags', models.PositiveIntegerField(db_column='ChannelInterruptFlags')),
                ('procflags', models.PositiveIntegerField(db_column='ProcFlags')),
                ('procchance', models.PositiveIntegerField(db_column='ProcChance')),
                ('proccharges', models.PositiveIntegerField(db_column='ProcCharges')),
                ('maxlevel', models.PositiveIntegerField(db_column='MaxLevel')),
                ('baselevel', models.PositiveIntegerField(db_column='BaseLevel')),
                ('spelllevel', models.PositiveIntegerField(db_column='SpellLevel')),
                ('durationindex', models.PositiveIntegerField(db_column='DurationIndex')),
                ('powertype', models.PositiveIntegerField(db_column='PowerType')),
                ('manacost', models.PositiveIntegerField(db_column='ManaCost')),
                ('manacostperlevel', models.PositiveIntegerField(db_column='ManaCostPerlevel')),
                ('manapersecond', models.PositiveIntegerField(db_column='ManaPerSecond')),
                ('manapersecondperlevel', models.PositiveIntegerField(db_column='ManaPerSecondPerLevel')),
                ('rangeindex', models.PositiveIntegerField(db_column='RangeIndex')),
                ('speed', models.FloatField(db_column='Speed')),
                ('modalnextspell', models.PositiveIntegerField(db_column='ModalNextSpell')),
                ('stackamount', models.PositiveIntegerField(db_column='StackAmount')),
                ('totem1', models.PositiveIntegerField(db_column='Totem1')),
                ('totem2', models.PositiveIntegerField(db_column='Totem2')),
                ('reagent1', models.IntegerField(db_column='Reagent1')),
                ('reagent2', models.IntegerField(db_column='Reagent2')),
                ('reagent3', models.IntegerField(db_column='Reagent3')),
                ('reagent4', models.IntegerField(db_column='Reagent4')),
                ('reagent5', models.IntegerField(db_column='Reagent5')),
                ('reagent6', models.IntegerField(db_column='Reagent6')),
                ('reagent7', models.IntegerField(db_column='Reagent7')),
                ('reagent8', models.IntegerField(db_column='Reagent8')),
                ('reagentcount1', models.PositiveIntegerField(db_column='ReagentCount1')),
                ('reagentcount2', models.PositiveIntegerField(db_column='ReagentCount2')),
                ('reagentcount3', models.PositiveIntegerField(db_column='ReagentCount3')),
                ('reagentcount4', models.PositiveIntegerField(db_column='ReagentCount4')),
                ('reagentcount5', models.PositiveIntegerField(db_column='ReagentCount5')),
                ('reagentcount6', models.PositiveIntegerField(db_column='ReagentCount6')),
                ('reagentcount7', models.PositiveIntegerField(db_column='ReagentCount7')),
                ('reagentcount8', models.PositiveIntegerField(db_column='ReagentCount8')),
                ('equippeditemclass', models.IntegerField(db_column='EquippedItemClass')),
                ('equippeditemsubclassmask', models.IntegerField(db_column='EquippedItemSubClassMask')),
                ('equippediteminventorytypemask', models.IntegerField(db_column='EquippedItemInventoryTypeMask')),
                ('effect1', models.PositiveIntegerField(db_column='Effect1')),
                ('effect2', models.PositiveIntegerField(db_column='Effect2')),
                ('effect3', models.PositiveIntegerField(db_column='Effect3')),
                ('effectdiesides1', models.IntegerField(db_column='EffectDieSides1')),
                ('effectdiesides2', models.IntegerField(db_column='EffectDieSides2')),
                ('effectdiesides3', models.IntegerField(db_column='EffectDieSides3')),
                ('effectrealpointsperlevel1', models.FloatField(db_column='EffectRealPointsPerLevel1')),
                ('effectrealpointsperlevel2', models.FloatField(db_column='EffectRealPointsPerLevel2')),
                ('effectrealpointsperlevel3', models.FloatField(db_column='EffectRealPointsPerLevel3')),
                ('effectbasepoints1', models.IntegerField(db_column='EffectBasePoints1')),
                ('effectbasepoints2', models.IntegerField(db_column='EffectBasePoints2')),
                ('effectbasepoints3', models.IntegerField(db_column='EffectBasePoints3')),
                ('effectmechanic1', models.PositiveIntegerField(db_column='EffectMechanic1')),
                ('effectmechanic2', models.PositiveIntegerField(db_column='EffectMechanic2')),
                ('effectmechanic3', models.PositiveIntegerField(db_column='EffectMechanic3')),
                ('effectimplicittargeta1', models.PositiveIntegerField(db_column='EffectImplicitTargetA1')),
                ('effectimplicittargeta2', models.PositiveIntegerField(db_column='EffectImplicitTargetA2')),
                ('effectimplicittargeta3', models.PositiveIntegerField(db_column='EffectImplicitTargetA3')),
                ('effectimplicittargetb1', models.PositiveIntegerField(db_column='EffectImplicitTargetB1')),
                ('effectimplicittargetb2', models.PositiveIntegerField(db_column='EffectImplicitTargetB2')),
                ('effectimplicittargetb3', models.PositiveIntegerField(db_column='EffectImplicitTargetB3')),
                ('effectradiusindex1', models.PositiveIntegerField(db_column='EffectRadiusIndex1')),
                ('effectradiusindex2', models.PositiveIntegerField(db_column='EffectRadiusIndex2')),
                ('effectradiusindex3', models.PositiveIntegerField(db_column='EffectRadiusIndex3')),
                ('effectapplyauraname1', models.PositiveIntegerField(db_column='EffectApplyAuraName1')),
                ('effectapplyauraname2', models.PositiveIntegerField(db_column='EffectApplyAuraName2')),
                ('effectapplyauraname3', models.PositiveIntegerField(db_column='EffectApplyAuraName3')),
                ('effectamplitude1', models.PositiveIntegerField(db_column='EffectAmplitude1')),
                ('effectamplitude2', models.PositiveIntegerField(db_column='EffectAmplitude2')),
                ('effectamplitude3', models.PositiveIntegerField(db_column='EffectAmplitude3')),
                ('effectmultiplevalue1', models.FloatField(db_column='EffectMultipleValue1')),
                ('effectmultiplevalue2', models.FloatField(db_column='EffectMultipleValue2')),
                ('effectmultiplevalue3', models.FloatField(db_column='EffectMultipleValue3')),
                ('effectchaintarget1', models.PositiveIntegerField(db_column='EffectChainTarget1')),
                ('effectchaintarget2', models.PositiveIntegerField(db_column='EffectChainTarget2')),
                ('effectchaintarget3', models.PositiveIntegerField(db_column='EffectChainTarget3')),
                ('effectitemtype1', models.PositiveIntegerField(db_column='EffectItemType1')),
                ('effectitemtype2', models.PositiveIntegerField(db_column='EffectItemType2')),
                ('effectitemtype3', models.PositiveIntegerField(db_column='EffectItemType3')),
                ('effectmiscvalue1', models.IntegerField(db_column='EffectMiscValue1')),
                ('effectmiscvalue2', models.IntegerField(db_column='EffectMiscValue2')),
                ('effectmiscvalue3', models.IntegerField(db_column='EffectMiscValue3')),
                ('effectmiscvalueb1', models.IntegerField(db_column='EffectMiscValueB1')),
                ('effectmiscvalueb2', models.IntegerField(db_column='EffectMiscValueB2')),
                ('effectmiscvalueb3', models.IntegerField(db_column='EffectMiscValueB3')),
                ('effecttriggerspell1', models.PositiveIntegerField(db_column='EffectTriggerSpell1')),
                ('effecttriggerspell2', models.PositiveIntegerField(db_column='EffectTriggerSpell2')),
                ('effecttriggerspell3', models.PositiveIntegerField(db_column='EffectTriggerSpell3')),
                ('effectpointspercombopoint1', models.FloatField(db_column='EffectPointsPerComboPoint1')),
                ('effectpointspercombopoint2', models.FloatField(db_column='EffectPointsPerComboPoint2')),
                ('effectpointspercombopoint3', models.FloatField(db_column='EffectPointsPerComboPoint3')),
                ('effectspellclassmask1_1', models.PositiveIntegerField(db_column='EffectSpellClassMask1_1')),
                ('effectspellclassmask1_2', models.PositiveIntegerField(db_column='EffectSpellClassMask1_2')),
                ('effectspellclassmask1_3', models.PositiveIntegerField(db_column='EffectSpellClassMask1_3')),
                ('effectspellclassmask2_1', models.PositiveIntegerField(db_column='EffectSpellClassMask2_1')),
                ('effectspellclassmask2_2', models.PositiveIntegerField(db_column='EffectSpellClassMask2_2')),
                ('effectspellclassmask2_3', models.PositiveIntegerField(db_column='EffectSpellClassMask2_3')),
                ('effectspellclassmask3_1', models.PositiveIntegerField(db_column='EffectSpellClassMask3_1')),
                ('effectspellclassmask3_2', models.PositiveIntegerField(db_column='EffectSpellClassMask3_2')),
                ('effectspellclassmask3_3', models.PositiveIntegerField(db_column='EffectSpellClassMask3_3')),
                ('spellvisual', models.PositiveIntegerField(db_column='SpellVisual')),
                ('spellvisual2', models.PositiveIntegerField(db_column='SpellVisual2')),
                ('spelliconid', models.PositiveIntegerField(db_column='SpellIconID')),
                ('activeiconid', models.PositiveIntegerField(db_column='ActiveIconID')),
                ('spellpriority', models.PositiveIntegerField(db_column='SpellPriority')),
                ('spellname', models.TextField(db_column='SpellName')),
                ('spellname2', models.TextField(blank=True, db_column='SpellName2', null=True)),
                ('spellname3', models.TextField(blank=True, db_column='SpellName3', null=True)),
                ('spellname4', models.TextField(blank=True, db_column='SpellName4', null=True)),
                ('spellname5', models.TextField(blank=True, db_column='SpellName5', null=True)),
                ('spellname6', models.TextField(blank=True, db_column='SpellName6', null=True)),
                ('spellname7', models.TextField(blank=True, db_column='SpellName7', null=True)),
                ('spellname8', models.TextField(blank=True, db_column='SpellName8', null=True)),
                ('spellname9', models.TextField(blank=True, db_column='SpellName9', null=True)),
                ('spellname10', models.TextField(blank=True, db_column='SpellName10', null=True)),
                ('spellname11', models.TextField(blank=True, db_column='SpellName11', null=True)),
                ('spellname12', models.TextField(blank=True, db_column='SpellName12', null=True)),
                ('spellname13', models.TextField(blank=True, db_column='SpellName13', null=True)),
                ('spellname14', models.TextField(blank=True, db_column='SpellName14', null=True)),
                ('spellname15', models.TextField(blank=True, db_column='SpellName15', null=True)),
                ('spellname16', models.TextField(blank=True, db_column='SpellName16', null=True)),
                ('rank1', models.TextField(blank=True, db_column='Rank1', null=True)),
                ('rank2', models.TextField(blank=True, db_column='Rank2', null=True)),
                ('rank3', models.TextField(blank=True, db_column='Rank3', null=True)),
                ('rank4', models.TextField(blank=True, db_column='Rank4', null=True)),
                ('rank5', models.TextField(blank=True, db_column='Rank5', null=True)),
                ('rank6', models.TextField(blank=True, db_column='Rank6', null=True)),
                ('rank7', models.TextField(blank=True, db_column='Rank7', null=True)),
                ('rank8', models.TextField(blank=True, db_column='Rank8', null=True)),
                ('rank9', models.TextField(blank=True, db_column='Rank9', null=True)),
                ('rank10', models.TextField(blank=True, db_column='Rank10', null=True)),
                ('rank11', models.TextField(blank=True, db_column='Rank11', null=True)),
                ('rank12', models.TextField(blank=True, db_column='Rank12', null=True)),
                ('rank13', models.TextField(blank=True, db_column='Rank13', null=True)),
                ('rank14', models.TextField(blank=True, db_column='Rank14', null=True)),
                ('rank15', models.TextField(blank=True, db_column='Rank15', null=True)),
                ('rank16', models.TextField(blank=True, db_column='Rank16', null=True)),
                ('manacostpercentage', models.PositiveIntegerField(db_column='ManaCostPercentage')),
                ('startrecoverycategory', models.PositiveIntegerField(db_column='StartRecoveryCategory')),
                ('startrecoverytime', models.PositiveIntegerField(db_column='StartRecoveryTime')),
                ('maxtargetlevel', models.PositiveIntegerField(db_column='MaxTargetLevel')),
                ('spellfamilyname', models.PositiveIntegerField(db_column='SpellFamilyName')),
                ('spellfamilyflags', models.PositiveBigIntegerField(db_column='SpellFamilyFlags')),
                ('spellfamilyflags2', models.PositiveIntegerField(db_column='SpellFamilyFlags2')),
                ('maxaffectedtargets', models.PositiveIntegerField(db_column='MaxAffectedTargets')),
                ('dmgclass', models.PositiveIntegerField(db_column='DmgClass')),
                ('preventiontype', models.PositiveIntegerField(db_column='PreventionType')),
                ('stancebarorder', models.IntegerField(db_column='StanceBarOrder')),
                ('dmgmultiplier1', models.FloatField(db_column='DmgMultiplier1')),
                ('dmgmultiplier2', models.FloatField(db_column='DmgMultiplier2')),
                ('dmgmultiplier3', models.FloatField(db_column='DmgMultiplier3')),
                ('minfactionid', models.PositiveIntegerField(db_column='MinFactionId')),
                ('minreputation', models.PositiveIntegerField(db_column='MinReputation')),
                ('requiredauravision', models.PositiveIntegerField(db_column='RequiredAuraVision')),
                ('totemcategory1', models.PositiveIntegerField(db_column='TotemCategory1')),
                ('totemcategory2', models.PositiveIntegerField(db_column='TotemCategory2')),
                ('areaid', models.PositiveIntegerField(db_column='AreaId')),
                ('schoolmask', models.PositiveIntegerField(db_column='SchoolMask')),
                ('runecostid', models.PositiveIntegerField(db_column='RuneCostID')),
                ('spellmissileid', models.PositiveIntegerField(db_column='SpellMissileID')),
                ('powerdisplayid', models.PositiveIntegerField(db_column='PowerDisplayId')),
                ('effectbonuscoefficient1', models.FloatField(db_column='EffectBonusCoefficient1')),
                ('effectbonuscoefficient2', models.FloatField(db_column='EffectBonusCoefficient2')),
                ('effectbonuscoefficient3', models.FloatField(db_column='EffectBonusCoefficient3')),
                ('spelldescriptionvariableid', models.PositiveIntegerField(db_column='SpellDescriptionVariableID')),
                ('spelldifficultyid', models.PositiveIntegerField(db_column='SpellDifficultyId')),
                ('isserverside', models.PositiveIntegerField(db_column='IsServerSide')),
                ('attributesserverside', models.PositiveIntegerField(db_column='AttributesServerside')),
            ],
            options={
                'db_table': 'spell_template',
                'managed': False,
            },
        ),
    ]
